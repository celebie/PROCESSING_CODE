import processing.core.*; 
import processing.data.*; 
import processing.event.*; 
import processing.opengl.*; 

import processing.opengl.*; 

import java.util.HashMap; 
import java.util.ArrayList; 
import java.io.File; 
import java.io.BufferedReader; 
import java.io.PrintWriter; 
import java.io.InputStream; 
import java.io.OutputStream; 
import java.io.IOException; 

public class MonCirclez extends PApplet {

//	IMPORTS	////////////////////////////////////////////////////


//
//  This is a PRocessing sketch
//
Boolean isFinal = true;
int alf = 37;
float angle, radius = 2, x, y, cX, cY, strokeSz = 1;

// color[] p3 = {  #111111, #000000, #111100, #001100, #333333, #444444, #555555, #222222, #555544, #333322, #222211, #444433, #334433, #445544, #223322, #223333, #445566, #777766, #444455, #667777, #554444, #445555, #667766, #221100, #001122, #557788, #887766, #332222, #223366, #AAAAAA, #664422, #556677, #888877, #443333, #777777, #888888, #666666, #7799AA, #998866, #7799CC, #AA9988, #221111, #113377, #DDDDDD, #774422, #112222, #99AAAA, #AAAA99, #886655, #667788, #888866, #888899, #99AA99, #775533, #446677, #9999AA, #997755, #556688, #999999, #887777, #889999, #999988, #666655, #778877, #998877, #445577, #334455, #777788, #668899, #333344, #778899, #88AABB, #EEEEEE, #EEEEDD, #996633, #88AACC, #AA9966, #335566, #AABBBB, #BBBBDD, #7799BB, #DDEEEE, #BB8855, #557799, #EEDDDD, #333366, #BBCCCC, #CCCCCC, #DDCCBB, #553322, #EEDDEE, #DDDDCC, #BBCCDD, #CCAA88, #665544, #668888, #778888, #776655, #666688, #887755, #776644, #886666, #446688, #665555, #997766, #556666, #554455, #5599CC, #775544, #99CCDD, #BB9977, #AA8877, #6677AA, #334444, #443322, #CCDDDD, #8899BB, #DDCCAA, #99BBCC, #776666, #334466, #CCDDCC, #CCBBAA, #664444, #556699, #886644, #8899AA, #997744, #553333, #998888, #554433, #444466, #775555, #664433, #779999, #88BBDD, #CCAA99, #442222, #BBCCBB, #6699BB, #CCBB99, #554422, #AA8888, #222233, #BBAA99, #99BBDD, #DDBB99, #BB9988, #223377, #AACCDD, #BBAAAA, #443344, #999977, #889988, #335555, #AABBCC, #555566, #AA8844, #885544, #EEDDCC, #774433, #CCCCBB, #223344, #112211, #555533, #666644, #556655, #665533, #446666, #554466, #557777, #665566, #554477, #665577, #777755, #663344, #773344, #556644, #222244, #224444, #555577, #553344, #224477, #4499AA, #449999, #554499, #7755AA, #333355, #6655AA, #663333, #336688, #55CCDD, #5599AA, #55AACC, #446655, #224455, #448899, #6699AA, #CCEEEE, #BBBBBB, #EEFFEE, #5555CC, #9966AA, #664477, #444499, #9977FF, #995566, #4488AA, #66CCBB, #447766, #44AACC, #66DDEE, #66CCDD, #447777, #223355, #44BBDD, #66CCEE, #335588, #55BBBB, #55BBDD, #66CCCC, #334422, #4499BB, #55CCEE, #224466, #44BBCC, #55CCBB, #AA9977, #558899, #BBAA77, #DDDDEE, #222288, #AA77FF, #AA77EE, #884444, #8877EE, #995588, #222266, #333377, #8866EE, #775577, #AA77DD, #664466, #EEDDBB, #4499CC, #66DDDD, #55BBCC, #55AAAA, #66BBAA, #337799, #335577, #55BBEE, #55AA99, #55BBAA, #3388BB, #559999, #225577, #448888, #55AA88, #336677, #55DDEE, #557766, #55CCCC, #447755, #AADDEE, #BBDDEE, #CCEEFF, #AA8855, #DDEEDD, #5577AA, #EEEECC, #886633, #552244, #BB2255, #BB2244, #552222, #7766EE, #885588, #664499, #6655CC, #AA88FF, #774444, #5555AA, #663355, #AA66BB, #7766DD, #AA77CC, #88BBCC, #446644, #3366AA, #444422, #3399BB, #3388AA, #3399DD, #559988, #3377AA, #224488, #445533, #99CCEE, #BB9966, #EECCAA, #AA8866, #7788AA, #CCCCDD, #332233, #772233, #885577, #4444AA, #9977DD, #9966EE, #774455, #8866DD, #9977EE, #9966DD, #8866AA, #337788, #558888, #33AADD, #66DDCC, #3388CC, #666677, #332244, #667799, #885555, #EECCBB, #DDBB88, #442233, #882244, #882233, #5555DD, #9966BB, #443355, #5544BB, #AA6699, #443366, #553355, #DDDDBB, #336666, #448877, #44AABB, #775566, #BBDDDD, #DDDDAA, #776699, #996644, #776633, #774466, #334488, #5544AA, #8877DD, #885599, #CCEEDD, #335544, #EEFFFF, #225588, #444488, #8855AA, #8877FF, #4488BB, #3377BB, #FFFFEE, #3344AA, #664455, #AA7744, #224433, #448855, #558855, #6699CC, #662244, #AA66AA, #6666DD, #995599, #2266AA, #226699, #558866, #7788BB, #DDCCCC, #5588BB, #6666EE, #222255, #558877, #559977, #8899CC, #CCFFEE, #333388, #5555BB, #4477AA, #DDCC99, #44AADD, #448866, #AA7733, #CC8855, #44BBEE, #CCDDEE, #FFEECC, #BB8844, #44AAEE, #DDEECC, #CCAA66, #777744, #888844, #887744, #666633, #6688AA, #447799, #AA7755, #447744, #336699, #444477, #77AABB, #552233, #662233, #BB8888, #EEDDAA, #DDAA66, #DDAA77, #337777, #CC9966, #44AAAA, #CC9955, #BBBBAA, #884422, #554488, #335533, #CCCCAA, #553366, #885533, #6655BB, #9966CC, #775588, #9977CC, #7755BB, #7766CC, #EEEEBB, #776688, #AA9999, #AADDDD, #AAAABB, #CCBBBB, #BB9999, #77AACC, #BBBBCC, #FFDDCC, #AACCCC, #663366, #CCDDBB, #7777EE, #8866BB, #443388, #4488CC, #887799, #CCAA77, #AA77BB, #775599, #998899, #CC8844, #774488, #7766BB, #225599, #99CCCC, #663322, #FFEEEE, #9988BB, #996688, #333399, #3344BB, #995577, #4455CC, #885566, #FFEEDD, #CCBBCC, #BB7744, #EECC99, #998855, #BBAABB, #99AABB, #5599BB, #FFFFFF, #AA88CC, #996699, #2244AA, #2244BB, #7755DD, #4444CC, #6655DD, #886688, #BB88CC, #AA66CC, #886699, #884466, #664488, #665588, #4477BB, #55AADD, #5577BB, #EEBB88, #AA2255, #AA2244, #BB8866, #BB7766, #774499, #8866CC, #4455DD, #AA5555, #AA7788, #FFFFDD, #AA8899, #CCAAAA, #CC9988, #4455AA, #FFCC99, #CC9999, #4444BB, #223399, #8855CC, #445588, #AA6666, #555599, #6666AA, #DDBBBB, #AA99AA, #9955AA, #776677, #2277BB, #66BB99, #DD9955, #334499, #774477, #AA6688, #BBBB99, #DDAA88, #334477, #CCBB88, #5588CC, #EECC88, #66AACC, #3344CC, #553377, #6666CC, #332266, #9977BB, #338899, #FFEEBB, #553388, #884455, #443399, #88CCDD, #CC9977, #DDFFEE, #EEFFDD, #996666, #777799, #88AADD, #665599, #222277, #BBAA88, #443377, #BBDDCC, #773333, #55AABB, #88AAAA, #99BBBB, #887788, #223388, #DD9966, #99AACC, #AABBAA, #2266BB, #775522, #6688BB, #226688, #772255, #EE2266, #DD2266, #CC2244, #442244, #BB2266, #882255, #CC2233, #3399CC, #5588AA, #AA2233, #EE2255, #662222, #992233, #AA2266, #992244, #CC2255, #44CCEE, #DD2244, #DD2255, #772244, #CC2266, #446633, #997777, #992266, #FF2266, #DD2277, #557755, #336655, #992255, #446699, #668877, #445522, #66BBBB, #55DDDD, #557744, #225566, #449988, #667755, #AA6622, #4466AA, #6666FF, #222299, #BBEEEE, #7766FF, #7766AA, #7744AA, #88BBBB, #7755CC, #DDBBAA, #995522, #335599, #FFDDAA, #FFDDBB, #BB7733, #AABBDD, #88CCEE, #8888AA, #996655, #224499, #AA5522, #99DDEE, #886677, #882266, #773322, #AA2222, #555588, #EE2244, #772222, #995555, #DDFFFF, #BB2233, #662255, #882222, #445599, #EE2233, #AAAA88, #9999BB, #BBCCAA, #442255, #885522, #FFFFCC, #BB8877, #AA7766, #447788, #DDEEFF, #BBEEFF, #AAAACC, #EEDD99, #CC8877, #3333AA, #DDCCDD, #7777AA, #CCCC99, #BB9955, #3355AA, #CCFFFF, #884433, #995533, #AA6644, #AA5544, #EEEEFF, #994433, #DDBB77, #995544, #AA6633 };
// color[] p3 = { #7F7F7F, #FFFFFF, #FFBFFF, #BFBFFF, #BFBFBF, #FFBFBF, #BF7FBF, #BF7F7F, #BFBF7F, #BF7F3F, #FFBF7F, #7F7F3F, #7F3F3F, #7F3F00, #3F3F00, #FFFFBF, #FFBF3F, #BF7F00, #BF3F00, #BFBF3F, #FF7F00, #3F0000, #7F0000, #FFBF00, #FFFF7F, #000000, #FF7F3F, #BF0000, #FF3F00, #BFBF00, #BF3F3F, #FF7F7F, #7F7F00, #FF0000, #FFFF3F, #FFFF00, #3F3F3F, #BFFFFF, #003F00, #3F7F3F, #003F3F, #3F7F00, #3F7F7F, #007F3F, #007F7F }; 
// color[] p3 = {  #111111, #000000, #111100, #001100, #333333, #444444, #555555, #222222, #555544, #333322, #222211, #444433, #334433, #445544, #223322, #223333, #445566, #777766, #444455, #667777, #554444, #445555, #667766, #221100, #001122, #557788, #887766, #332222, #223366, #AAAAAA, #664422, #556677, #888877, #443333, #777777, #888888, #666666, #7799AA, #998866, #7799CC, #AA9988, #221111, #113377, #DDDDDD, #774422, #112222, #99AAAA, #AAAA99, #886655, #667788, #888866, #888899, #99AA99, #775533, #446677, #9999AA, #997755, #556688, #999999, #887777, #889999, #999988, #666655, #778877, #998877, #445577, #334455, #777788, #668899, #333344, #778899, #88AABB, #EEEEEE, #EEEEDD, #996633, #88AACC, #AA9966, #335566, #AABBBB, #BBBBDD, #7799BB, #DDEEEE, #BB8855, #557799, #EEDDDD, #333366, #BBCCCC, #CCCCCC, #DDCCBB, #553322, #EEDDEE, #DDDDCC, #BBCCDD, #CCAA88, #665544, #668888, #778888, #776655, #666688, #887755, #776644, #886666, #446688, #665555, #997766, #556666, #554455, #5599CC, #775544, #99CCDD, #BB9977, #AA8877, #6677AA, #334444, #443322, #CCDDDD, #8899BB, #DDCCAA, #99BBCC, #776666, #334466, #CCDDCC, #CCBBAA, #664444, #556699, #886644, #8899AA, #997744, #553333, #998888, #554433, #444466, #775555, #664433, #779999, #88BBDD, #CCAA99, #442222, #BBCCBB, #6699BB, #CCBB99, #554422, #AA8888, #222233, #BBAA99, #99BBDD, #DDBB99, #BB9988, #223377, #AACCDD, #BBAAAA, #443344, #999977, #889988, #335555, #AABBCC, #555566, #AA8844, #885544, #EEDDCC, #774433, #CCCCBB, #223344, #112211, #555533, #666644, #556655, #665533, #446666, #554466, #557777, #665566, #554477, #665577, #777755, #663344, #773344, #556644, #222244, #224444, #555577, #553344, #224477, #4499AA, #449999, #554499, #7755AA, #333355, #6655AA, #663333, #336688, #55CCDD, #5599AA, #55AACC, #446655, #224455, #448899, #6699AA, #CCEEEE, #BBBBBB, #EEFFEE, #5555CC, #9966AA, #664477, #444499, #9977FF, #995566, #4488AA, #66CCBB, #447766, #44AACC, #66DDEE, #66CCDD, #447777, #223355, #44BBDD, #66CCEE, #335588, #55BBBB, #55BBDD, #66CCCC, #334422, #4499BB, #55CCEE, #224466, #44BBCC, #55CCBB, #AA9977, #558899, #BBAA77, #DDDDEE, #222288, #AA77FF, #AA77EE, #884444, #8877EE, #995588, #222266, #333377, #8866EE, #775577, #AA77DD, #664466, #EEDDBB, #4499CC, #66DDDD, #55BBCC, #55AAAA, #66BBAA, #337799, #335577, #55BBEE, #55AA99, #55BBAA, #3388BB, #559999, #225577, #448888, #55AA88, #336677, #55DDEE, #557766, #55CCCC, #447755, #AADDEE, #BBDDEE, #CCEEFF, #AA8855, #DDEEDD, #5577AA, #EEEECC, #886633, #552244, #BB2255, #BB2244, #552222, #7766EE, #885588, #664499, #6655CC, #AA88FF, #774444, #5555AA, #663355, #AA66BB, #7766DD, #AA77CC, #88BBCC, #446644, #3366AA, #444422, #3399BB, #3388AA, #3399DD, #559988, #3377AA, #224488, #445533, #99CCEE, #BB9966, #EECCAA, #AA8866, #7788AA, #CCCCDD, #332233, #772233, #885577, #4444AA, #9977DD, #9966EE, #774455, #8866DD, #9977EE, #9966DD, #8866AA, #337788, #558888, #33AADD, #66DDCC, #3388CC, #666677, #332244, #667799, #885555, #EECCBB, #DDBB88, #442233, #882244, #882233, #5555DD, #9966BB, #443355, #5544BB, #AA6699, #443366, #553355, #DDDDBB, #336666, #448877, #44AABB, #775566, #BBDDDD, #DDDDAA, #776699, #996644, #776633, #774466, #334488, #5544AA, #8877DD, #885599, #CCEEDD, #335544, #EEFFFF, #225588, #444488, #8855AA, #8877FF, #4488BB, #3377BB, #FFFFEE, #3344AA, #664455, #AA7744, #224433, #448855, #558855, #6699CC, #662244, #AA66AA, #6666DD, #995599, #2266AA, #226699, #558866, #7788BB, #DDCCCC, #5588BB, #6666EE, #222255, #558877, #559977, #8899CC, #CCFFEE, #333388, #5555BB, #4477AA, #DDCC99, #44AADD, #448866, #AA7733, #CC8855, #44BBEE, #CCDDEE, #FFEECC, #BB8844, #44AAEE, #DDEECC, #CCAA66, #777744, #888844, #887744, #666633, #6688AA, #447799, #AA7755, #447744, #336699, #444477, #77AABB, #552233, #662233, #BB8888, #EEDDAA, #DDAA66, #DDAA77, #337777, #CC9966, #44AAAA, #CC9955, #BBBBAA, #884422, #554488, #335533, #CCCCAA, #553366, #885533, #6655BB, #9966CC, #775588, #9977CC, #7755BB, #7766CC, #EEEEBB, #776688, #AA9999, #AADDDD, #AAAABB, #CCBBBB, #BB9999, #77AACC, #BBBBCC, #FFDDCC, #AACCCC, #663366, #CCDDBB, #7777EE, #8866BB, #443388, #4488CC, #887799, #CCAA77, #AA77BB, #775599, #998899, #CC8844, #774488, #7766BB, #225599, #99CCCC, #663322, #FFEEEE, #9988BB, #996688, #333399, #3344BB, #995577, #4455CC, #885566, #FFEEDD, #CCBBCC, #BB7744, #EECC99, #998855, #BBAABB, #99AABB, #5599BB, #FFFFFF, #AA88CC, #996699, #2244AA, #2244BB, #7755DD, #4444CC, #6655DD, #886688, #BB88CC, #AA66CC, #886699, #884466, #664488, #665588, #4477BB, #55AADD, #5577BB, #EEBB88, #AA2255, #AA2244, #BB8866, #BB7766, #774499, #8866CC, #4455DD, #AA5555, #AA7788, #FFFFDD, #AA8899, #CCAAAA, #CC9988, #4455AA, #FFCC99, #CC9999, #4444BB, #223399, #8855CC, #445588, #AA6666, #555599, #6666AA, #DDBBBB, #AA99AA, #9955AA, #776677, #2277BB, #66BB99, #DD9955, #334499, #774477, #AA6688, #BBBB99, #DDAA88, #334477, #CCBB88, #5588CC, #EECC88, #66AACC, #3344CC, #553377, #6666CC, #332266, #9977BB, #338899, #FFEEBB, #553388, #884455, #443399, #88CCDD, #CC9977, #DDFFEE, #EEFFDD, #996666, #777799, #88AADD, #665599, #222277, #BBAA88, #443377, #BBDDCC, #773333, #55AABB, #88AAAA, #99BBBB, #887788, #223388, #DD9966, #99AACC, #AABBAA, #2266BB, #775522, #6688BB, #226688, #772255, #EE2266, #DD2266, #CC2244, #442244, #BB2266, #882255, #CC2233, #3399CC, #5588AA, #AA2233, #EE2255, #662222, #992233, #AA2266, #992244, #CC2255, #44CCEE, #DD2244, #DD2255, #772244, #CC2266, #446633, #997777, #992266, #FF2266, #DD2277, #557755, #336655, #992255, #446699, #668877, #445522, #66BBBB, #55DDDD, #557744, #225566, #449988, #667755, #AA6622, #4466AA, #6666FF, #222299, #BBEEEE, #7766FF, #7766AA, #7744AA, #88BBBB, #7755CC, #DDBBAA, #995522, #335599, #FFDDAA, #FFDDBB, #BB7733, #AABBDD, #88CCEE, #8888AA, #996655, #224499, #AA5522, #99DDEE, #886677, #882266, #773322, #AA2222, #555588, #EE2244, #772222, #995555, #DDFFFF, #BB2233, #662255, #882222, #445599, #EE2233, #AAAA88, #9999BB, #BBCCAA, #442255, #885522, #FFFFCC, #BB8877, #AA7766, #447788, #DDEEFF, #BBEEFF, #AAAACC, #EEDD99, #CC8877, #3333AA, #DDCCDD, #7777AA, #CCCC99, #BB9955, #3355AA, #CCFFFF, #884433, #995533, #AA6644, #AA5544, #EEEEFF, #994433, #DDBB77, #995544, #AA6633
// , #7F7F7F, #FFFFFF, #FFBFFF, #BFBFFF, #BFBFBF, #FFBFBF, #BF7FBF, #BF7F7F, #BFBF7F, #BF7F3F, #FFBF7F, #7F7F3F, #7F3F3F, #7F3F00, #3F3F00, #FFFFBF, #FFBF3F, #BF7F00, #BF3F00, #BFBF3F, #FF7F00, #3F0000, #7F0000, #FFBF00, #FFFF7F, #000000, #FF7F3F, #BF0000, #FF3F00, #BFBF00, #BF3F3F, #FF7F7F, #7F7F00, #FF0000, #FFFF3F, #FFFF00, #3F3F3F, #BFFFFF, #003F00, #3F7F3F, #003F3F, #3F7F00, #3F7F7F, #007F3F, #007F7F }; 
int[] p3 = { 0xff9C9CAC, 0xffA4A4B4, 0xffACACB4, 0xff948B9C, 0xffA4A4AC, 0xffACACBD, 0xffA49CAC, 0xffA4ACB4, 0xffB4B4C5, 0xffB4B4BD, 0xffBDB4C5, 0xffBDBDC5, 0xffB4BDC5, 0xffBDBDCD, 0xffC5C5D5, 0xffC5C5CD, 0xffC5BDCD, 0xffBDC5CD, 0xffB4C5C5, 0xffACB4BD, 0xffC5CDD5, 0xffCDCDD5, 0xffD5CDDE, 0xffCDC5D5, 0xffD5D5DE, 0xffCDCDDE, 0xffCDD5D5, 0xffCDCDCD, 0xffCDC5CD, 0xffBDC5C5, 0xffC5CDCD, 0xffC5C5C5, 0xffC5CDC5, 0xffCDCDC5, 0xffBDBDBD, 0xffC5BDC5, 0xffACACAC, 0xffB4B4B4, 0xffACB4B4, 0xffB4BDBD, 0xffB4ACB4, 0xff9C9CA4, 0xffACA4AC, 0xff9C9C9C, 0xffA4ACAC, 0xffA4A4A4, 0xff9CA4A4, 0xff94949C, 0xff949C9C, 0xff949494, 0xffA49CA4, 0xffB4ACAC, 0xffA49C9C, 0xffACA4A4, 0xffBDBDB4, 0xffACACA4, 0xffB4B4AC, 0xffBDB4B4, 0xffC5BDB4, 0xffC5C5BD, 0xffC5BDBD, 0xffB4BDB4, 0xffACB4AC, 0xffCDC5C5, 0xffD5CDCD, 0xffD5D5CD, 0xffDED5CD, 0xffD5CDC5, 0xffCDCDBD, 0xffD5C5C5, 0xffDECDC5, 0xffE6D5CD, 0xffE6DED5, 0xffE6DECD, 0xffDED5C5, 0xffDECDCD, 0xffE6D5D5, 0xffE6E6D5, 0xffDEDECD, 0xffCDC5BD, 0xffDEDED5, 0xffD5D5C5, 0xffDED5D5, 0xffE6DEDE, 0xffE6E6DE, 0xffD5D5D5, 0xffCDD5CD, 0xffBDC5BD, 0xffBDB4BD, 0xff8B8B9C, 0xff949CA4, 0xffB4ACBD, 0xff9C949C, 0xffC5B4BD, 0xffD5DED5, 0xff9494A4, 0xff9CA4AC, 0xffACA4B4, 0xffACBDBD, 0xffBDB4AC, 0xffA4A49C, 0xffCDBDC5, 0xff8B9494, 0xff8B949C, 0xff9C9494, 0xffB4ACA4, 0xff838B94, 0xff9C94A4, 0xff9CA4B4, 0xffA4A4BD, 0xffA4ACBD, 0xff9C9C94, 0xffD5CDBD, 0xff9CA49C, 0xff948B8B, 0xff948B94, 0xff838394, 0xff94948B, 0xff838383, 0xffCDD5C5, 0xff7B838B, 0xffACB4C5, 0xff8B8B8B, 0xff949C94, 0xff8B838B, 0xffCDBDBD, 0xffC5CDBD, 0xff83838B, 0xffACA49C, 0xff8B8B83, 0xffBDACB4, 0xffCDBDB4, 0xffC5B4B4, 0xffBDC5B4, 0xff838B9C, 0xff8B8B94, 0xff83837B, 0xff7B7B7B, 0xff8B948B, 0xffD5C5BD, 0xff838B8B, 0xff8B8383, 0xffC5C5B4, 0xffA4ACA4, 0xff7B8383, 0xff7B7B8B, 0xff7B7B83, 0xffCDC5B4, 0xffBDACAC, 0xffBDBDAC, 0xffC5BDAC, 0xff837B7B, 0xff837B83, 0xffC5B4AC, 0xff7B7B73, 0xff737373, 0xff737B7B, 0xff6A6A73, 0xff7B737B, 0xff73737B, 0xff7B837B, 0xff737383, 0xff6A737B, 0xff7B7373, 0xff6A7373, 0xff6A6A6A, 0xff737B83, 0xff8B94A4, 0xffA49C94, 0xffAC9C9C, 0xff736A73, 0xff7B8394, 0xff737B8B, 0xffB4A4A4, 0xff62626A, 0xff5A5A5A, 0xff626262, 0xff626A6A, 0xff9C8B94, 0xff5A5A62, 0xff6A626A, 0xff949CAC, 0xff8B9CA4, 0xff5A6262, 0xff838B83, 0xff6A7383, 0xff6A6A7B, 0xff626273, 0xff7B8B83, 0xff83948B, 0xff94A49C, 0xff8B9C9C, 0xff6A736A, 0xff839494, 0xff738383, 0xff7B8B8B, 0xff626A7B, 0xff948394, 0xff73837B, 0xff626A62, 0xff9C948B, 0xff8B7B83, 0xff837B8B, 0xff8B8394, 0xff8B9C8B, 0xff948B83, 0xff525252, 0xff5A625A, 0xff8B7B8B, 0xff8B7B94, 0xff738373, 0xff7B8B7B, 0xff8B8B7B, 0xff947B7B, 0xffA47B83, 0xff9C7B83, 0xff94838B, 0xff8B7B7B, 0xff948383, 0xff737B73, 0xff9483A4, 0xff8B839C, 0xff738B83, 0xffA4837B, 0xffC5948B, 0xffBD736A, 0xffB45252, 0xffB44141, 0xffB43939, 0xffBD4A52, 0xffCD7373, 0xffC57B83, 0xffAC7B83, 0xff7B7383, 0xff837B73, 0xff9C838B, 0xff736A6A, 0xff525A5A, 0xff52525A, 0xff83839C, 0xff6A8383, 0xff739483, 0xff8B6A73, 0xffBD737B, 0xffC56262, 0xffA41010, 0xffC50818, 0xffDE0818, 0xffDE0810, 0xffE61818, 0xffD51018, 0xffBD0810, 0xffB41820, 0xffD5525A, 0xffD5737B, 0xff83626A, 0xff836A73, 0xff837383, 0xff7B6A73, 0xff7B736A, 0xff6A7B7B, 0xffB47B7B, 0xffBD3941, 0xffC51018, 0xffE61018, 0xffEE0010, 0xffF60010, 0xffEE0008, 0xffE60010, 0xffCD1010, 0xffD52929, 0xffDE5252, 0xffD56A6A, 0xffBD6A73, 0xffAC737B, 0xff946A7B, 0xff836A83, 0xff736A7B, 0xff83737B, 0xff7B8373, 0xff6A8B83, 0xff62837B, 0xff94737B, 0xffB46A73, 0xffAC3139, 0xffC51010, 0xffDE0808, 0xffE60000, 0xffF60018, 0xffFF0018, 0xffFF0010, 0xffFF0008, 0xffF60008, 0xffF60000, 0xffDE0000, 0xffD51010, 0xffCD2029, 0xffC53941, 0xffCD5A6A, 0xffCD7383, 0xffB4737B, 0xff837373, 0xff8B7383, 0xff6A7B73, 0xff626A73, 0xff5A6273, 0xff7B949C, 0xffC5394A, 0xffEE0810, 0xffC50810, 0xffC52020, 0xffD54A4A, 0xffD5736A, 0xffBD7B73, 0xff9C7B6A, 0xff83736A, 0xff73736A, 0xff83738B, 0xff7B738B, 0xff6A7B83, 0xffA46A73, 0xffC54A52, 0xffE60008, 0xffEE0000, 0xffEE0808, 0xffDE0800, 0xffCD1810, 0xffC53129, 0xffC55A4A, 0xffBD6A62, 0xffAC7B73, 0xff8B7373, 0xff6A8373, 0xff8B837B, 0xff9C8B83, 0xffA4948B, 0xffB49C94, 0xffB49C8B, 0xffAC948B, 0xff9C9483, 0xff949C83, 0xff949C8B, 0xffA48B8B, 0xff9C8383, 0xff837B94, 0xffC55A6A, 0xffB40010, 0xffDE0008, 0xffE60808, 0xffEE0800, 0xffFF0810, 0xffE60810, 0xffBD1018, 0xffBD838B, 0xff735A62, 0xff6A7B6A, 0xff8B8373, 0xffAC8B7B, 0xffCD8B83, 0xffD5837B, 0xffCD5A62, 0xffC53141, 0xffBD2031, 0xffAC2029, 0xffB44A4A, 0xffD58B83, 0xff94947B, 0xff9CA494, 0xffA49494, 0xff625A62, 0xff9C8B8B, 0xff8B5A62, 0xffAC2931, 0xffD50008, 0xffF60800, 0xffD50010, 0xffC53139, 0xffD5626A, 0xffC57B73, 0xff9C6A6A, 0xff8B6A6A, 0xff838B7B, 0xffA48B7B, 0xffB4837B, 0xffCD837B, 0xffCD6A6A, 0xffC54A41, 0xffAC2020, 0xffB40810, 0xff9C1010, 0xffBD6262, 0xffCD9C94, 0xffAC9C94, 0xff5A5A6A, 0xff94736A, 0xff8B1008, 0xffC51808, 0xffDE2018, 0xffD50808, 0xffDE0010, 0xffCD2929, 0xffBD6A6A, 0xff9C737B, 0xff8B6A7B, 0xff946A83, 0xff947B83, 0xffAC8383, 0xffBD837B, 0xffBD626A, 0xffC5414A, 0xffDE3139, 0xffDE1029, 0xffDE0018, 0xffA40810, 0xffA43139, 0xffDEA4A4, 0xffB49C9C, 0xffB4A49C, 0xff525A62, 0xff5A626A, 0xff8B625A, 0xff8B1000, 0xffCD2918, 0xffD52020, 0xffCD0000, 0xffDE0820, 0xffBD0820, 0xff8B0008, 0xff730000, 0xff940000, 0xffBD0000, 0xffCD1818, 0xffBD2929, 0xffD58383, 0xff6A7362, 0xff9C7373, 0xffC58383, 0xffE68B8B, 0xffDE5A62, 0xffCD2939, 0xffCD1020, 0xffDE1020, 0xffE60818, 0xffD50810, 0xffC50010, 0xffB41020, 0xff8B1820, 0xffEEACB4, 0xff6A6262, 0xffACA494, 0xffB4AC9C, 0xffB4A494, 0xffBDAC9C, 0xffBDACA4, 0xff736A83, 0xff946A62, 0xff8B0800, 0xffCD0810, 0xffB40808, 0xff6A0000, 0xff830000, 0xffE60820, 0xffEE0018, 0xffFF0000, 0xffD51020, 0xffC52029, 0xffD54A52, 0xffD57B7B, 0xff947373, 0xff9C6A73, 0xffAC7373, 0xffC56A73, 0xffC55A5A, 0xffCD0010, 0xffD50000, 0xffAC0818, 0xff9C2929, 0xff949483, 0xffBDA494, 0xffC5AC9C, 0xffC5B4A4, 0xffBDB4A4, 0xff9C9C8B, 0xff8B0000, 0xff941010, 0xff520000, 0xff410000, 0xff6A0800, 0xffB41010, 0xffD51820, 0xffCD3939, 0xffCD5A5A, 0xffC57B7B, 0xffAC838B, 0xff7B948B, 0xff7B626A, 0xffAC7B8B, 0xffBD7373, 0xffBD5A52, 0xffBD4141, 0xffC52931, 0xffCD1820, 0xff942920, 0xffC5837B, 0xffA49C8B, 0xffAC9C8B, 0xffCDBDAC, 0xffCDB4A4, 0xff62736A, 0xff6A837B, 0xff940808, 0xff8B0810, 0xff4A0000, 0xff830808, 0xffF60808, 0xffC51820, 0xffCD4A5A, 0xffDE7B8B, 0xffA4838B, 0xffA4949C, 0xff73738B, 0xffA47B7B, 0xffDE7383, 0xffE66273, 0xffD53152, 0xffC51029, 0xffCD1018, 0xffDE1018, 0xffB40000, 0xff9C1000, 0xff731810, 0xffB48B8B, 0xffC5ACA4, 0xffD5BDAC, 0xffD5C5B4, 0xff627373, 0xff627B6A, 0xffA46273, 0xff9C0810, 0xff5A0008, 0xff8B1020, 0xffD50818, 0xffCD1829, 0xffDE4152, 0xffDE6A73, 0xffD57B8B, 0xffC58394, 0xffAC8394, 0xffB46A6A, 0xffCD4A4A, 0xffEE0818, 0xffCD0008, 0xffC50808, 0xffAC0800, 0xff7B1008, 0xff5A2929, 0xff8B9483, 0xffC5B49C, 0xffDEC5B4, 0xffD5BDA4, 0xffD5C5AC, 0xffCDBDA4, 0xffCDC5AC, 0xffC5BDA4, 0xff9C5A62, 0xffAC1018, 0xff830018, 0xffCD0829, 0xffCD4A52, 0xffBD8B8B, 0xff7B6A62, 0xff8B736A, 0xff9C7B73, 0xffB4525A, 0xffBD414A, 0xffC51829, 0xffC50008, 0xffA40008, 0xff7B0810, 0xff521820, 0xffDEC5AC, 0xffDECDB4, 0xffE6CDB4, 0xffDECDAC, 0xffD5CDB4, 0xff4A525A, 0xff8B5252, 0xffB41818, 0xffB40818, 0xff730810, 0xff730008, 0xffE60800, 0xffD51008, 0xffBD1808, 0xffCD4A41, 0xffDE7B7B, 0xffD58B94, 0xffAC738B, 0xffA47B94, 0xff738B7B, 0xff73838B, 0xff947B73, 0xffCD7B73, 0xffD5625A, 0xffCD3131, 0xffC51810, 0xffBD0808, 0xffC50000, 0xffA40000, 0xff9C0000, 0xff940010, 0xff730010, 0xff4A1818, 0xffACA48B, 0xffD5C5A4, 0xffE6D5B4, 0xff9C6262, 0xff9C1818, 0xff8B1010, 0xffDE1010, 0xffDE394A, 0xffE65A73, 0xffD5738B, 0xffB48394, 0xff94839C, 0xffA47B73, 0xffB46A62, 0xffBD524A, 0xffBD3931, 0xffF60810, 0xffC50800, 0xffBD0800, 0xff9C0008, 0xff410808, 0xff735252, 0xff948B7B, 0xffB4AC94, 0xffBDB49C, 0xffD5CDAC, 0xffDED5B4, 0xffD5CDA4, 0xffB4B4A4, 0xff414A52, 0xff5A736A, 0xff7B6A6A, 0xff832020, 0xff276800, 0xff520800, 0xffBD1010, 0xffDE1008, 0xffC52031, 0xffCD8B8B, 0xff839483, 0xffB47B83, 0xffC5525A, 0xffCD0808, 0xff940810, 0xff620000, 0xff410810, 0xff6A4A4A, 0xffCDC5A4, 0xffDED5BD, 0xffD5D5B4, 0xffD5D5AC, 0xffDEDEB4, 0xffDECDBD, 0xffDEDEC5, 0xffCDCDB4, 0xffACAC9C, 0xff7B5A6A, 0xff622939, 0xff5A1010, 0xffD55A5A, 0xffBD8373, 0xff948373, 0xff838373, 0xffAC7B7B, 0xffBD5252, 0xffEE1018, 0xffF60818, 0xffE60018, 0xff730800, 0xff376808, 0xff6A4141, 0xff6A6A62, 0xffACAC94, 0xffB4B49C, 0xffBDBDA4, 0xffC5C5AC, 0xffCDCDAC, 0xffC5C5A4, 0xffC5CDAC, 0xffD5D5BD, 0xff4A5262, 0xff6A6273, 0xff7B6A7B, 0xff735262, 0xffB41018, 0xffFF0808, 0xffBD8383, 0xff9C7B7B, 0xffCD0818, 0xffAC0810, 0xffA40808, 0xff9C0808, 0xff940008, 0xffA40010, 0xffC50018, 0xffBD0010, 0xffBDA4A4, 0xffA4A494, 0xffB4BDA4, 0xffBDC5AC, 0xffD5DEC5, 0xffC5CDB4, 0xff52626A, 0xff5A5262, 0xffD51029, 0xffC5838B, 0xffCD737B, 0xffBD2029, 0xffB40008, 0xff7B0000, 0xff9C1018, 0xffA41018, 0xffAC1020, 0xffAC1820, 0xffA41818, 0xff941018, 0xff831010, 0xff8B0010, 0xff830008, 0xff410008, 0xffACB4A4, 0xffACB49C, 0xffCDD5BD, 0xff4A4A52, 0xff525262, 0xff5A627B, 0xff62737B, 0xff736262, 0xff5A1818, 0xff7B1010, 0xffAC0808, 0xffD53139, 0xffE66262, 0xffD50018, 0xffAC0010, 0xff620810, 0xff6A1010, 0xff6A0008, 0xff310008, 0xff62414A, 0xffB4BDAC, 0xff62625A, 0xff734139, 0xff731008, 0xffA40800, 0xffC51008, 0xffCD2031, 0xffCD6A73, 0xffBD7B7B, 0xffD56A7B, 0xffD54A5A, 0xffC51020, 0xffBD0008, 0xff376800, 0xff410800, 0xff520008, 0xff310808, 0xffC5ACAC, 0xffA4AC9C, 0xff525A6A, 0xff414A5A, 0xff41414A, 0xff5A6A6A, 0xff73627B, 0xff6A627B, 0xff7B5A52, 0xff5A0000, 0xffBD2931, 0xffDE7373, 0xffA48383, 0xffC58B8B, 0xffE68383, 0xffBD1020, 0xffAC0000, 0xff9C0800, 0xffA41008, 0xffBD0018, 0xffA40018, 0xff200000, 0xff310000, 0xff200808, 0xff625252, 0xff39414A, 0xff4A4A5A, 0xff5A6A73, 0xff6A2029, 0xffDE4A5A, 0xff9C837B, 0xffC5737B, 0xffD56A73, 0xffB40800, 0xff940800, 0xff7B0800, 0xff6A0010, 0xff180800, 0xff291010, 0xff313941, 0xff41525A, 0xff4A5A5A, 0xff8B4A52, 0xff8B1818, 0xff6A0808, 0xffCD414A, 0xffDE737B, 0xffDE8383, 0xff9C1008, 0xff730808, 0xff620008, 0xff292018, 0xff4A5A62, 0xff394A52, 0xff62627B, 0xff835262, 0xff6A1820, 0xff621010, 0xff312929, 0xff627B73, 0xff623941, 0xff200800, 0xff100000, 0xff180000, 0xffD50800, 0xffAC0008, 0xff7B0008, 0xff290800, 0xff201010, 0xff394152, 0xff625A5A, 0xff625A52, 0xff526262, 0xff62525A, 0xff4A0818, 0xff520810, 0xff392929, 0xff73626A, 0xff833152, 0xff6A0820, 0xff7B1018, 0xff080000, 0xff524A4A, 0xff414152, 0xff7B6A83, 0xff83526A, 0xff6A2939, 0xff5A0810, 0xff7B0808, 0xffAC9CA4, 0xff8B9C94, 0xffBDCDC5, 0xff6A4A52, 0xff411010, 0xff290808, 0xff100808, 0xff31414A, 0xff523131, 0xff4A0008, 0xff394A4A, 0xff6A525A, 0xff391018, 0xff5A0808, 0xff180808, 0xff523939, 0xff94A4A4, 0xff31394A, 0xff6A5A5A, 0xff311820, 0xff310010, 0xffEE0020, 0xff6A625A, 0xff9CACAC, 0xff5A414A, 0xff4A1810, 0xffAC0829, 0xffCD0018, 0xffBD1000, 0xff622929, 0xff731010, 0xff276808, 0xff376810, 0xff620010, 0xff9C0010, 0xffCD0800, 0xffAC0018, 0xff8B0808, 0xffBD1008, 0xff7B525A, 0xff621818, 0xff9C2020, 0xffA42018, 0xffAC1000, 0xffC51000, 0xff6A1818, 0xffB41810, 0xffAC1808, 0xff830800, 0xff4A3931, 0xff7B4A52, 0xff731820, 0xff9C1808, 0xffCD1008, 0xff311818, 0xffD5DECD, 0xff415252, 0xff7B5A62, 0xff732020, 0xffA41829, 0xff312020, 0xff523139, 0xff621018, 0xff731018, 0xff390808, 0xff201008, 0xff4A0010, 0xff292920, 0xff7B6262, 0xff7B625A, 0xff6A5A52, 0xff4A4141, 0xffAC0820, 0xff940818, 0xff181810, 0xff291818, 0xffB41008, 0xff830010, 0xff520808, 0xff525A52, 0xff310800, 0xff412020, 0xff201818, 0xff5A0800, 0xff392920, 0xff5A4A4A, 0xff393941, 0xffEE0820, 0xff413931, 0xff413941, 0xffEE1008, 0xff830810, 0xff9C0818, 0xff8B7B73, 0xff94837B, 0xffAC1010, 0xff941818, 0xff620808, 0xff8B0018, 0xff625A6A, 0xff4A0808, 0xff7B2020, 0xff942929, 0xff942020, 0xff8B1810, 0xff520010, 0xffBD0818, 0xff523141, 0xffAC1008, 0xff732929, 0xff390800, 0xff310810, 0xff290810, 0xff311010, 0xff8B737B, 0xff625A73, 0xff522020, 0xff411810, 0xff391810, 0xff291808, 0xff181008, 0xff291018, 0xff200810, 0xff080800, 0xff6A5A6A, 0xff734A52, 0xffA42029, 0xff8B2029, 0xff311808, 0xff181000, 0xff080808, 0xff100800, 0xff311008, 0xff4A1008, 0xff522018, 0xff291810, 0xff7B3131, 0xff4A3929, 0xff5A7373, 0xff5A6A62, 0xff6A5262, 0xff733139, 0xff9C2029, 0xff941020, 0xff181808, 0xff081808, 0xff001008, 0xff080008, 0xff100008, 0xff944A4A, 0xffB4625A, 0xffC5625A, 0xffC55252, 0xffAC4A4A, 0xff94524A, 0xff7B4A39, 0xff391808, 0xff201808, 0xff392018, 0xff523129, 0xff8B7362, 0xff5A6A5A, 0xff62314A, 0xff7B1029, 0xffA41820, 0xffBD1818, 0xff000000, 0xff7B4141, 0xff6A2929, 0xff411008, 0xff311000, 0xff391008, 0xff391010, 0xff4A2918, 0xff4A2020, 0xff202918, 0xff6A5241, 0xffA47362, 0xff837B62, 0xff83836A, 0xff830818, 0xff8B1018, 0xff6A0810, 0xffCD1029, 0xffE61031, 0xff831018, 0xff522929, 0xff101008, 0xff4A2018, 0xff624141, 0xff5A4A41, 0xff620800, 0xff941008, 0xffA47B62, 0xff7B7B5A, 0xff7B7B6A, 0xff5A5252, 0xff521810, 0xff731000, 0xff4A1010, 0xff201000, 0xff7B1820, 0xffAC1831, 0xff5A1008, 0xff410010, 0xff944A41, 0xff7B836A, 0xff837B6A, 0xff393131, 0xff832018, 0xffAC2920, 0xff732031, 0xff081000, 0xff201810, 0xff200008, 0xff9C1829, 0xffAC1029, 0xff5A2020, 0xff521008, 0xff180008, 0xff4A2931, 0xff101810, 0xff101808, 0xff180810, 0xff311018, 0xff4A3939, 0xff5A1018, 0xff521018, 0xff181010, 0xff101000, 0xff526273, 0xff181020, 0xff100810, 0xff391818, 0xff4A1018, 0xff081008, 0xff000800, 0xff4A5A6A, 0xff5A6A7B, 0xff181829, 0xff080010, 0xff000008, 0xff291008, 0xff181018, 0xff182010, 0xff415262, 0xff627383, 0xff5A737B, 0xff526252, 0xff626A5A, 0xff081810, 0xff5A5241, 0xff525239, 0xff101010, 0xff202920, 0xff394A5A, 0xff415A62, 0xff835A4A, 0xff83624A, 0xff836A52, 0xff001000, 0xff182020, 0xff626A83, 0xff624A4A, 0xff6A4A31, 0xffAC835A, 0xffC5946A, 0xff835A39, 0xff000808, 0xff101818, 0xff181818, 0xff202929, 0xff314152, 0xff6A6A83, 0xff5A7383, 0xff6A5252, 0xff624139, 0xff7B5231, 0xff835220, 0xff8B5A29, 0xffA47B5A, 0xff393939, 0xff39525A, 0xff735A52, 0xff6A5239, 0xff9C7352, 0xff9C7341, 0xff7B5A29, 0xff8B6A52, 0xff4A5252, 0xff7B624A, 0xffCDAC83, 0xffBD9C73, 0xff9C7B52, 0xff7B5A31, 0xff4A3118, 0xff292929, 0xff7B6A5A, 0xffA4835A, 0xffBD9462, 0xffC5A473, 0xffC5A47B, 0xff735A41, 0xff392918, 0xff627B7B, 0xffEECD9C, 0xffDEB47B, 0xffD5AC73, 0xffBDA47B, 0xff524129, 0xff5A4A31, 0xff8B6229, 0xff946A29, 0xffAC834A, 0xffAC8B6A, 0xff625239, 0xff7B5A20, 0xff9C6A29, 0xffA47B41, 0xff735231, 0xff201820, 0xff8B7B62, 0xffAC8B5A, 0xffA47339, 0xffA47B4A, 0xff7B5A41, 0xff4A4A4A, 0xff415A6A, 0xff62524A, 0xff9C7B5A, 0xffB48B5A, 0xffC59C6A, 0xff8B6A4A, 0xff395262, 0xff4A626A, 0xff8B7352, 0xffB4835A, 0xff836241, 0xff6A6A5A, 0xff293129, 0xff393931, 0xff313131, 0xff837362, 0xffB49473, 0xffBD946A, 0xff6A624A, 0xff41524A, 0xff292020, 0xff836A4A, 0xff6A5A41, 0xff736A5A, 0xff7B6252, 0xffC5AC8B, 0xffAC945A, 0xff947341, 0xff8B7341, 0xff736252, 0xff414A4A, 0xff5A4A39, 0xffA48B6A, 0xff9C7339, 0xffB48B52, 0xff8B6A62, 0xff413131, 0xff5A4131, 0xff734A31, 0xff946241, 0xffA47352, 0xff9C5A39, 0xff8B5231, 0xff9C624A, 0xff6A4139, 0xff526A73, 0xff5A7B83, 0xff5A7B7B, 0xff412929, 0xff5A4139, 0xff412918, 0xff4A6273, 0xff627B83, 0xff4A2929, 0xff412920, 0xff312018, 0xff6A738B, 0xff5A5A52, 0xff5A524A, 0xff526A7B, 0xff628383, 0xff4A2920, 0xff524A41, 0xff5A6A83, 0xff312920, 0xff412018, 0xff522920, 0xff736A62, 0xff5A3929, 0xff624A41, 0xff6A7B8B, 0xff737B6A, 0xff181820, 0xff394141, 0xff313939, 0xff41526A, 0xff4A5A73, 0xff525A73, 0xff9C8B7B, 0xff293131, 0xff738394, 0xff202029, 0xff52627B, 0xff393139, 0xff392008, 0xff202020, 0xff4A526A, 0xff413139, 0xff6A524A, 0xff523120, 0xff291800, 0xff292010, 0xff413939, 0xff202018, 0xff414141, 0xffEED5C5, 0xff8B6A5A, 0xff314139, 0xffA49483, 0xff52524A, 0xffF6EEDE, 0xffA48B94, 0xff313139, 0xff4A4A39, 0xff524131, 0xff735A5A, 0xff414139, 0xff413129, 0xff523929, 0xffF6DECD, 0xff523931, 0xffBDA483, 0xff947352, 0xff9C7362, 0xff8B735A, 0xff8B7B6A, 0xffAC9483, 0xffA48B83, 0xffAC8B83, 0xff312939, 0xff413120, 0xff624A31, 0xffEED5BD, 0xff312008, 0xff291000, 0xffDEB48B, 0xffC59C5A, 0xffCDA462, 0xffCD9C62, 0xffC5945A, 0xffC58352, 0xffBD734A, 0xffB46A39, 0xffBD7B4A, 0xffB47341, 0xffAC7341, 0xffB48352, 0xff9C6239, 0xff9C6A39, 0xff9C6A41, 0xffAC7B52, 0xff9C734A, 0xffA47B52, 0xffAC7B5A, 0xffB47B5A, 0xffC58B6A, 0xffB4735A, 0xffAC7352, 0xff9C6241, 0xff9C6A4A, 0xff946A52, 0xff312931, 0xffDEBDA4, 0xff624120, 0xffC59C62, 0xffE6B46A, 0xffBD8B41, 0xffCDA452, 0xffDEAC5A, 0xffD5A452, 0xffCD8B41, 0xffB47331, 0xffC58341, 0xffB47B39, 0xffBD8B4A, 0xffB48341, 0xffB47B41, 0xffCD945A, 0xffBD8B52, 0xffB4834A, 0xffBD945A, 0xffBD9C5A, 0xffA48341, 0xffAC7339, 0xff9C5A20, 0xff945218, 0xffA46229, 0xffA46A31, 0xff946A41, 0xff4A3110, 0xff201800, 0xff182018, 0xff392931, 0xff5A3918, 0xff312000, 0xffE6B473, 0xffC59C4A, 0xffCD9C52, 0xffCD9452, 0xffC5834A, 0xff945A18, 0xffAC7B39, 0xffB48B41, 0xffAC8B41, 0xff9C7B31, 0xffAC8341, 0xffD5A46A, 0xffD5B46A, 0xffDEBD73, 0xffD5AC6A, 0xffD5AC62, 0xffDEA462, 0xffD5B47B, 0xff8B734A, 0xff312910, 0xff081010, 0xff4A2910, 0xffAC8362, 0xffEECDAC, 0xffE6BD8B, 0xffDEAC73, 0xffE6B47B, 0xffB4734A, 0xffBD834A, 0xffE6AC7B, 0xff8B5A20, 0xffBD9452, 0xffB48B4A, 0xffC59452, 0xffBD8352, 0xffB47B4A, 0xffAC946A, 0xff311800, 0xff182029, 0xff293139, 0xff62738B, 0xffA48362, 0xff836252, 0xff9C5218, 0xffCD8B52, 0xffA46A29, 0xffC58B4A, 0xffD59C62, 0xffA47331, 0xffAC7B41, 0xffCD9C5A, 0xffC59462, 0xffBD835A, 0xff412910, 0xffD5B49C, 0xffC5A494, 0xff94836A, 0xffEEC59C, 0xffC57B39, 0xff9C6220, 0xffBD8341, 0xffDEA46A, 0xff946229, 0xffCDA473, 0xffEECDA4, 0xff5A4129, 0xff414A41, 0xff523118, 0xffE6C5A4, 0xffC5A48B, 0xff9C8373, 0xffFFD5B4, 0xffD59C6A, 0xffB47339, 0xffBD7B41, 0xffC58B52, 0xffBD7341, 0xffAC6A39, 0xffA46231, 0xffCDA46A, 0xffA47341, 0xffDEB473, 0xffC59C52, 0xffC59441, 0xffD59C52, 0xffC58B41, 0xff312010, 0xff627B8B, 0xff412908, 0xffDEBD9C, 0xffA46A39, 0xffAC7B4A, 0xffCD8352, 0xffAC6231, 0xff9C5A29, 0xffAC6A31, 0xffCD944A, 0xffBD7B39, 0xffBD947B, 0xff392029, 0xff6A4A20, 0xff5A3110, 0xff623920, 0xff624A29, 0xff7B6241, 0xff7B5229, 0xff835229, 0xff8B5A31, 0xff946239, 0xff946A39, 0xffA4734A, 0xff8B6231, 0xff313129, 0xff6A4A29, 0xff947B6A, 0xff7B7362, 0xff73735A, 0xff6A6A52, 0xff6A6252, 0xff625A4A, 0xff6A5A4A, 0xff6A5231, 0xff624129, 0xff73624A, 0xff736A52, 0xff313931, 0xff6A7B94, 0xff6A8394, 0xff524139, 0xff4A3120, 0xff4A3129, 0xff393129, 0xff312918, 0xff9C8362, 0xff4A4131, 0xff292008, 0xff292918, 0xff393120, 0xffBDA48B, 0xffAC9C83, 0xff9C8B73, 0xff392908, 0xff312908, 0xff292000, 0xff292908, 0xff292910, 0xff292029, 0xff392020, 0xff392910, 0xff413110, 0xff392768, 0xff311810, 0xff73839C, 0xff83735A, 0xff413118, 0xff412010, 0xff201018, 0xff7B8B9C, 0xff738B9C, 0xff738B94, 0xff392010, 0xffA49C83, 0xff837352, 0xff393110, 0xff523918, 0xff526A6A, 0xff5A3931, 0xff4A2010, 0xffDEB49C, 0xff524A29, 0xff393108, 0xff413108, 0xff4A3910, 0xff4A3918, 0xff523920, 0xff5A4120, 0xff413910, 0xff413908, 0xff413100, 0xff4A3108, 0xff392000, 0xff412000, 0xff411800, 0xff292931, 0xff080810, 0xff7B94A4, 0xff6A838B, 0xff5A3120, 0xffD5A494, 0xff6A4A39, 0xff523910, 0xff523110, 0xff4A4118, 0xff523108, 0xff522910, 0xff735239, 0xff7B8BA4, 0xff524118, 0xff524110, 0xff523908, 0xff5A3908, 0xff623908, 0xff623910, 0xff624118, 0xff5A4A18, 0xff5A4118, 0xff524120, 0xff4A2908, 0xff313110, 0xff202010, 0xff8394A4, 0xffBD9C83, 0xffB4A48B, 0xff735229, 0xff624A20, 0xff624A18, 0xff624A10, 0xff624110, 0xff6A4118, 0xff734120, 0xff5A3118, 0xff7B8B94, 0xff8B9CAC, 0xffB49483, 0xffA49C7B, 0xffA4946A, 0xff735220, 0xff6A5220, 0xff625218, 0xff734A20, 0xff734A18, 0xff734110, 0xff734118, 0xff524A18, 0xff4A4110, 0xff8B6241, 0xff83949C, 0xff839CA4, 0xffAC9C73, 0xff947B39, 0xff8B6220, 0xff835A29, 0xff836229, 0xff7B6231, 0xff736229, 0xff6A5A20, 0xff6A5218, 0xff6A4A18, 0xff7B4A20, 0xff5A4110, 0xff524A10, 0xff525218, 0xff5A5220, 0xff5A5229, 0xff524A20, 0xff947B62, 0xffB4A483, 0xffBDAC6A, 0xffA48339, 0xffAC8339, 0xff9C6A31, 0xff8B6A31, 0xff735218, 0xff735A20, 0xff9C8352, 0xffB49C73, 0xff412768, 0xffB49C7B, 0xff94735A, 0xff623918, 0xff839CAC, 0xffDEC59C, 0xffD5B473, 0xffAC7B31, 0xff9C7331, 0xff946220, 0xff7B4A18, 0xff836A41, 0xff8B7B4A, 0xffB4A47B, 0xff622010, 0xff621810, 0xff6A3931, 0xff734A39, 0xff8B5241, 0xffCD947B, 0xffDEAC94, 0xff8B624A, 0xff5A3920, 0xff415A73, 0xff94A4AC, 0xff94A4B4, 0xff947B5A, 0xffDEBD8B, 0xffCDA45A, 0xffB48339, 0xffAC7B29, 0xffBD8331, 0xffBD7B31, 0xff6A5229, 0xff8B8B6A, 0xff838362, 0xff5A5239, 0xff5A1810, 0xff8B3939, 0xff832939, 0xff834A39, 0xff9C6A52, 0xffD5BD9C, 0xff9C8B6A, 0xff7B9494, 0xff4A3131, 0xffB4946A, 0xffCDAC73, 0xffB48B39, 0xffB48B31, 0xffB48331, 0xffB47B31, 0xffBD8B62, 0xff4A4129, 0xff414129, 0xff411818, 0xff7B3941, 0xffA47373, 0xff8B8B73, 0xff946A6A, 0xff9C836A, 0xffD5AC94, 0xffF6CDAC, 0xffE6C59C, 0xff94734A, 0xff391800, 0xffC5A49C, 0xffBD944A, 0xffBD9441, 0xffDEB483, 0xff947B4A, 0xff735A39, 0xffFFDED5, 0xffDEBDBD, 0xffE6EEDE, 0xffEEDED5, 0xffFFDEDE, 0xffFFCDD5, 0xffDEC5C5, 0xffD5BDB4, 0xffA4947B, 0xff7B5A39, 0xffCDAC7B, 0xffB49462, 0xff9C7B4A, 0xff9C835A, 0xff8BA4AC, 0xff839C9C, 0xffF6E6AC, 0xffDECDA4, 0xff6A5A39, 0xff413929, 0xffEED5CD, 0xffFFE6DE, 0xffFFF6E6, 0xffCDAC9C, 0xff945A52, 0xff521010, 0xff733131, 0xff623931, 0xffEEDEC5, 0xffD5B494, 0xffC5A483, 0xffA48B62, 0xffDEBD94, 0xffF6CDA4, 0xffE6CDAC, 0xff623118, 0xff314141, 0xff94ACB4, 0xff73949C, 0xff7B9C9C, 0xffCDAC94, 0xff412008, 0xffCDA47B, 0xffAC8331, 0xffBD9C6A, 0xffB49C83, 0xffF6E6DE, 0xffCDA494, 0xffC58373, 0xff9C4131, 0xff941820, 0xff411000, 0xffB42939, 0xff833131, 0xff735241, 0xff624131, 0xffCDB49C, 0xff9CACB4, 0xff737B94, 0xff738B8B, 0xff7B9CA4, 0xff411808, 0xff522918, 0xffD5AC83, 0xff9C7320, 0xffB48B62, 0xff948B6A, 0xff313118, 0xff5A2918, 0xffFFCDC5, 0xff6A4A41, 0xffFFD5C5, 0xff945239, 0xff9C5241, 0xffDE9494, 0xffBD9483, 0xffD5AC9C, 0xffE6AC9C, 0xffE6A494, 0xffA46A5A, 0xff8B5A4A, 0xff946A5A, 0xff625241, 0xff5A2910, 0xff626252, 0xffA4B4BD, 0xff4A2008, 0xffDEAC8B, 0xffA47B29, 0xffBD9C41, 0xffBD9C52, 0xffBD9C7B, 0xffEEBDAC, 0xffA46A62, 0xff7B3931, 0xff5A2010, 0xffE6E6C5, 0xff202000, 0xff835239, 0xff83A4A4, 0xffBD9C8B, 0xffDEAC83, 0xffDEBD6A, 0xffE6C56A, 0xffEECD83, 0xffA48B5A, 0xff4A4A41, 0xff623120, 0xff835231, 0xff522908, 0xff8BA4B4, 0xffD5AC7B, 0xffEEC583, 0xffDEC573, 0xffD5C583, 0xff393920, 0xff6A3118, 0xff4A6A6A, 0xff8BA4A4, 0xff83A4AC, 0xff73625A, 0xff6A4129, 0xff6A3920, 0xffDEBD7B, 0xffB4945A, 0xff836A31, 0xff736220, 0xff7B6A31, 0xff5A5A41, 0xff525231, 0xff293118, 0xff202910, 0xff293120, 0xff622910, 0xff834A29, 0xff6A3929, 0xff6A3120, 0xffDEC583, 0xff9C7B39, 0xff5A4A20, 0xff202008, 0xff414120, 0xff313918, 0xff293110, 0xff4A0800, 0xff733110, 0xff8B4A29, 0xff415A5A, 0xff7B4131, 0xff735210, 0xff5A4A29, 0xff413918, 0xff4A4120, 0xff736A4A, 0xff621808, 0xffA43939, 0xff313120, 0xff623110, 0xff7B3110, 0xff733920, 0xffB48B83, 0xffA48B41, 0xff625A41, 0xff391000, 0xff4A1808, 0xff5A1000, 0xff9C3920, 0xffDE624A, 0xffCD5A39, 0xffBD5239, 0xff6A2008, 0xff733918, 0xff833910, 0xff8394AC, 0xffDEC5A4, 0xff735A18, 0xff393918, 0xff737352, 0xff414131, 0xff5A1808, 0xff732000, 0xff8B3918, 0xffC56231, 0xffD56229, 0xffDE5A29, 0xffE65A31, 0xffD55A39, 0xff943120, 0xff833110, 0xff522010, 0xff4A6262, 0xffE6DEC5, 0xff8B94AC, 0xff8B9CB4, 0xff9C6231, 0xffBD948B, 0xff947B41, 0xff413920, 0xffB45A39, 0xffC55A31, 0xffBD5A20, 0xffCD6A20, 0xffDE8329, 0xffE66A20, 0xffE64110, 0xffEE4A29, 0xffE65A4A, 0xff7B2920, 0xff7B3918, 0xff833108, 0xff944A29, 0xff9C735A, 0xff945A29, 0xff525229, 0xff734129, 0xff834A31, 0xffBD7352, 0xffCD7B5A, 0xffD58362, 0xffDE7B62, 0xffDE735A, 0xffDE6A52, 0xffCD624A, 0xffAC4A31, 0xff833920, 0xff6A2010, 0xff9C4120, 0xffBD6239, 0xffD57B4A, 0xffE67B4A, 0xffEE7341, 0xffD55A20, 0xffE66A31, 0xffE67B39, 0xffCD5220, 0xffC53108, 0xffDE4129, 0xffDE5239, 0xffB44A39, 0xff7B2908, 0xff312029, 0xffC5835A, 0xffAC734A, 0xff626231, 0xff394120, 0xffE6B483, 0xffEEB483, 0xffF6B483, 0xffEE9C6A, 0xffFFA473, 0xffFF9C6A, 0xffFF8B62, 0xffF68352, 0xffF6834A, 0xffF67B4A, 0xffE66A41, 0xffCD6241, 0xffA45241, 0xff834139, 0xff101018, 0xff000010, 0xff000018, 0xff945231, 0xffDE7352, 0xffDE6A29, 0xffD56218, 0xffC55A20, 0xffDE6231, 0xffDE4A20, 0xffC53110, 0xffB42910, 0xff9C1810, 0xffB43920, 0xffA42910, 0xffCD4A39, 0xffC55241, 0xff8B3920, 0xff102018, 0xff6A2908, 0xff732768, 0xff9C5231, 0xffB48362, 0xffEEDEBD, 0xff625220, 0xff625229, 0xff525220, 0xff945A4A, 0xffDEA48B, 0xffF6BD9C, 0xffF6BD94, 0xffF6BD8B, 0xffF6AC7B, 0xffF6AC73, 0xffFFAC7B, 0xffF69462, 0xffF68B5A, 0xffFF9462, 0xffEE834A, 0xffE67B41, 0xffD56A39, 0xffDE837B, 0xffCD948B, 0xff734141, 0xffCD7B62, 0xffF69C7B, 0xffDE6241, 0xffDE6239, 0xffFF835A, 0xffF66239, 0xffBD3910, 0xffA43118, 0xff7B1810, 0xff831008, 0xffC54131, 0xff9C4118, 0xff521000, 0xff622908, 0xff29394A, 0xffEEE6D5, 0xff6A7B9C, 0xffD59462, 0xffEEEECD, 0xff736239, 0xffD5A48B, 0xffBD836A, 0xffC5836A, 0xffBD7B62, 0xffBD7B5A, 0xffB47352, 0xffA4624A, 0xff9C5A41, 0xff8B5239, 0xff7B4129, 0xff733929, 0xff623129, 0xff833929, 0xffBD5A41, 0xffE67B52, 0xffEE7B5A, 0xffEE835A, 0xffC55220, 0xffD56A41, 0xffA44A29, 0xffD5835A, 0xffD57339, 0xffAC5A39, 0xffAC3931, 0xffE65229, 0xff8B2910, 0xff624A39, 0xff5A2000, 0xff6A2768, 0xff8B4120, 0xffDE9C62, 0xff625A29, 0xff5A5A20, 0xff5A5210, 0xff625A20, 0xff7B6A39, 0xff6A5A31, 0xff524A39, 0xff836A5A, 0xff7B3929, 0xffE66A4A, 0xffFF7B52, 0xffEE7B52, 0xffB44A20, 0xffE68B5A, 0xffEEA473, 0xffEEBD94, 0xffFFC58B, 0xffFFC583, 0xffE6AC94, 0xffD57B73, 0xffDE7362, 0xffF66A4A, 0xffFF5229, 0xffF64A20, 0xffD54A20, 0xff8B3118, 0xffEED5B4, 0xffE6BDA4, 0xff522008, 0xff834120, 0xffD59C5A, 0xffDEAC6A, 0xff5A4A10, 0xff948352, 0xffA49473, 0xffA45231, 0xffDE734A, 0xffEE7B4A, 0xffE66A39, 0xffE6734A, 0xffDE8352, 0xffFFB483, 0xffFFBD94, 0xffFFAC8B, 0xffF6A473, 0xffF69C6A, 0xffFF9C73, 0xffF6946A, 0xffF68B73, 0xffFF947B, 0xffF67B5A, 0xffEE6239, 0xffF65A31, 0xffEE4A20, 0xffDE4120, 0xffD55239, 0xffFFEED5, 0xffFFEEC5, 0xffFFE6BD, 0xffFFDEB4, 0xffCD9C83, 0xff394A62, 0xff62838B, 0xff627B94, 0xff9C7B62, 0xff625210, 0xff837341, 0xff200818, 0xffD57341, 0xffE67341, 0xffEE7B41, 0xffDE6A39, 0xffEEA462, 0xffFF946A, 0xffFF8B6A, 0xffEE7352, 0xffE66241, 0xffDE5A31, 0xffE66231, 0xffF66A41, 0xffDE5229, 0xff832918, 0xffE6D5BD, 0xffFFF6D5, 0xffFFF6CD, 0xffFFD5AC, 0xffFFCDAC, 0xffE6BD9C, 0xff7B5239, 0xff314A52, 0xff5A738B, 0xff6A839C, 0xffCD9C6A, 0xff735A4A, 0xffD5B48B, 0xff836239, 0xff101800, 0xff291020, 0xff000810, 0xff944A31, 0xffEE6A39, 0xffEE8352, 0xffF6835A, 0xffF6734A, 0xffEE6241, 0xffE65231, 0xffDE4A18, 0xffDE4118, 0xffD54110, 0xffC54A18, 0xffE65A39, 0xffFFF6DE, 0xffFFEEBD, 0xffEEBDA4, 0xffBD8B73, 0xff7B4A31, 0xff314A5A, 0xff5A6A8B, 0xff627394, 0xff5A6A94, 0xff838BA4, 0xffAC8B73, 0xffE6BD83, 0xffEEBD7B, 0xffEEC58B, 0xffAC8B62, 0xff8B5A41, 0xffD56A4A, 0xffE66239, 0xffFF7341, 0xffF67B52, 0xffFF734A, 0xffFF6A41, 0xffFF6A39, 0xffF65A29, 0xffEE5A29, 0xffEE5229, 0xffEE4120, 0xffFF5231, 0xffF65231, 0xffE63918, 0xffDE3918, 0xffD52908, 0xffCD2908, 0xffD53108, 0xffD53910, 0xffD54120, 0xffD55229, 0xffC54110, 0xffCD4A20, 0xffD55241, 0xff200010, 0xffFFFFDE, 0xffFFFFD5, 0xffFFFFCD, 0xffFFF6C5, 0xffFFE6B4, 0xffF6C59C, 0xffE6B49C, 0xff835241, 0xff395A6A, 0xff416273, 0xff4A627B, 0xff39526A, 0xff31415A, 0xff626A8B, 0xff7B839C, 0xff8B8BA4, 0xffD5A45A, 0xffF6D59C, 0xffE6CDA4, 0xff8B7339, 0xffA45A39, 0xffC57B5A, 0xffCD836A, 0xff732920, 0xff180818, 0xffE6A483, 0xffDE946A, 0xff83625A, 0xffEE5220, 0xffE65A29, 0xffF67B41, 0xffFF7B4A, 0xffFF6231, 0xffF65A39, 0xffFF6A4A, 0xffE64A20, 0xffE64120, 0xffD53110, 0xffE64A29, 0xffBD3920, 0xffC56252, 0xff521808, 0xff835A41, 0xff628394, 0xffD5A462, 0xffFFDEA4, 0xffE6CD9C, 0xff836A29, 0xffCD7352, 0xffF69C83, 0xffE68B6A, 0xff180010, 0xffDE9C7B, 0xffE68B62, 0xffEE8B5A, 0xffEE9473, 0xff7B3129, 0xffFFDEBD, 0xffFFD5A4, 0xffE6D59C, 0xffDECD94, 0xffEECD94, 0xffD58352, 0xffEE5218, 0xffFF7B41, 0xffF66229, 0xffFF6229, 0xffF65218, 0xffFF5A39, 0xffFF7352, 0xffFF7B5A, 0xffD53920, 0xffCD3118, 0xffFF5A31, 0xffA42000, 0xff9C3118, 0xff944131, 0xffF6FFD5, 0xffF6F6BD, 0xffF6B494, 0xffBD8B6A, 0xff291820, 0xff7B5A4A, 0xff4A1800, 0xff526A83, 0xff5A6241, 0xff527383, 0xffCD9462, 0xffF6CD94, 0xff7B524A, 0xffEEDEA4, 0xff7B6A20, 0xffB44A31, 0xffA42010, 0xffC54A31, 0xffE6835A, 0xffC58362, 0xffE69462, 0xffFF945A, 0xffFF8B5A, 0xff735A31, 0xffFFEEB4, 0xffFFE6A4, 0xffF6EE94, 0xffF6F69C, 0xffFFF6A4, 0xffF6D58B, 0xffD5834A, 0xffD55220, 0xffF66A31, 0xffFF8352, 0xffFF8B52, 0xffFF8341, 0xffFF7329, 0xffF66A20, 0xffF66A29, 0xffF66A52, 0xffF67B62, 0xffF68B6A, 0xffF66241, 0xffEE5239, 0xffD54129, 0xffBD3110, 0xffC53918, 0xffEE5231, 0xffFF6239, 0xffCD5231, 0xff831800, 0xff943929, 0xff4A1000, 0xffF6FFCD, 0xffFFC594, 0xffF6B48B, 0xffDEA47B, 0xff8B6252, 0xff734131, 0xff5A4A52, 0xff4A5A7B, 0xff415A7B, 0xff625A31, 0xff5A5231, 0xff5A7394, 0xff52738B, 0xff5A7B8B, 0xffD59452, 0xffFFCD94, 0xffEEDEB4, 0xff736231, 0xff5A5218, 0xff945229, 0xffD54A29, 0xffF68362, 0xffDE7339, 0xff945A41, 0xffEE946A, 0xffFF834A, 0xffEE735A, 0xff8B2010, 0xff833931, 0xff5A2920, 0xffB49C5A, 0xffEEE683, 0xffF6F683, 0xffF6F68B, 0xffF6F6A4, 0xffB46241, 0xffC54A29, 0xffEE6218, 0xffE65241, 0xffE65A52, 0xffDE5A4A, 0xffC55239, 0xffBD5229, 0xffAC4120, 0xffAC2018, 0xffAC2918, 0xffBD3918, 0xffD54A18, 0xffF66231, 0xffFF7339, 0xffEE6A31, 0xffD55A31, 0xffBD4A29, 0xff6A1000, 0xffF6F6D5, 0xffF6F6CD, 0xffEEAC8B, 0xff4A6283, 0xff4A6A83, 0xff526283, 0xff736A31, 0xff836A39, 0xff735A29, 0xff7B6A4A, 0xff5A5A4A, 0xff4A628B, 0xff627B9C, 0xffC58B5A, 0xffD5945A, 0xffF6BD83, 0xffE67339, 0xffF67B39, 0xffEE7331, 0xffEE9C7B, 0xffFFA46A, 0xffFF8362, 0xffBD4A31, 0xff943920, 0xffF6AC94, 0xffEEB48B, 0xffCD9473, 0xffAC6A5A, 0xff945241, 0xff834131, 0xff390810, 0xffFFEEA4, 0xffFFEE83, 0xffE6E673, 0xffDEDE6A, 0xffEEF683, 0xffE6DE9C, 0xff734A41, 0xffB44129, 0xffFF9C5A, 0xffEE6A29, 0xffFF6A29, 0xffE65A41, 0xff9C1820, 0xff6A1808, 0xffEE7B39, 0xffFF8B4A, 0xffEE7339, 0xff944129, 0xffFFF6BD, 0xffF6DEA4, 0xffEEAC7B, 0xffEEA48B, 0xffAC735A, 0xff102020, 0xff41627B, 0xff4A6A7B, 0xff395A73, 0xff7B6239, 0xff8B6A39, 0xff626283, 0xff6A8B94, 0xffEEBD83, 0xff8B4A20, 0xffF6624A, 0xffF65A41, 0xffD55231, 0xffDE7331, 0xffDE6A20, 0xff9C5239, 0xffAC9473, 0xffC5B494, 0xffF6D5AC, 0xffFFCDA4, 0xffFFB494, 0xffF6A46A, 0xffF69452, 0xffF6AC83, 0xffF69C73, 0xffE6836A, 0xffBD5241, 0xffD57B5A, 0xffFF9C62, 0xffDE7B4A, 0xffC57341, 0xffF6E683, 0xffE6DE73, 0xffF6EE83, 0xffC5AC7B, 0xff832920, 0xffE67352, 0xffF68B52, 0xffF6944A, 0xffF67341, 0xffDE6A4A, 0xffEE6A4A, 0xffCD5229, 0xffFFE6AC, 0xffFFCD9C, 0xffE69473, 0xffD58373, 0xff526A8B, 0xff7B7352, 0xff527394, 0xffF6C594, 0xffF6E6C5, 0xff6A3918, 0xffAC5231, 0xffE67B5A, 0xffF67352, 0xffDE7341, 0xffEE945A, 0xffF6945A, 0xffDE6A31, 0xffF6C58B, 0xffFFDEAC, 0xffDE7B41, 0xffDE8341, 0xffC55229, 0xff9C2910, 0xffBD4131, 0xffD5624A, 0xff9C4129, 0xff7B3920, 0xffFFEE94, 0xffFFE673, 0xffEEDE62, 0xffFFE67B, 0xffF6DE83, 0xff8B3120, 0xffE68339, 0xffEE9441, 0xffFF944A, 0xffFF9452, 0xffC59C7B, 0xff9C8B62, 0xffB47362, 0xffD58B7B, 0xffB4624A, 0xffBD5A39, 0xffEE5A39, 0xffF6F6DE, 0xffF6E6B4, 0xffF69473, 0xffDE836A, 0xff8B4A31, 0xff416A83, 0xff416283, 0xff4A6A8B, 0xff836231, 0xff625231, 0xff6A6229, 0xff5A5A39, 0xffDEAC7B, 0xffF6BD7B, 0xffE66229, 0xffF67339, 0xffF6A45A, 0xffF6AC6A, 0xffEEAC73, 0xffE6945A, 0xffFFBD7B, 0xffC57339, 0xffA44118, 0xffAC3118, 0xff941800, 0xff831808, 0xff6A1008, 0xffF66A39, 0xff7B2008, 0xff733120, 0xffDEC58B, 0xffF6E673, 0xffF6DE52, 0xffFFEE5A, 0xffFFEE6A, 0xffFFE683, 0xff942908, 0xffD55A29, 0xffF68339, 0xffF68B39, 0xffF68B41, 0xffF68341, 0xffC56A39, 0xffFFD59C, 0xffF6CD8B, 0xffFFAC83, 0xffEE9462, 0xffEE6231, 0xffBD4118, 0xff943110, 0xffFF9473, 0xffC57352, 0xff4A738B, 0xff416A8B, 0xff526A94, 0xff4A6A94, 0xff625A39, 0xff4A4A31, 0xffD5A473, 0xffD5BD94, 0xffE69C62, 0xffEEAC6A, 0xffFFAC73, 0xffD56A31, 0xffFFA462, 0xffFFA452, 0xffE67B31, 0xff9C3918, 0xff832910, 0xff832008, 0xffA43910, 0xffCD6220, 0xffDE6A18, 0xffDE6218, 0xff943118, 0xff732910, 0xffF6EEAC, 0xffF6E66A, 0xffFFE662, 0xffE6AC62, 0xffCD4A10, 0xffFF6A31, 0xffDE6A41, 0xffEE5A31, 0xff6A1800, 0xffEEE6C5, 0xffFFC59C, 0xffDE835A, 0xff622918, 0xff527B94, 0xff4A7394, 0xff52739C, 0xff41628B, 0xff9CACBD, 0xff6A2920, 0xffFFB473, 0xffCD7B39, 0xffBD5A18, 0xffE67331, 0xffFF7B39, 0xffE66220, 0xffDE5A10, 0xffD54A08, 0xffDE6220, 0xffCD5A18, 0xffC55208, 0xffBD5A08, 0xffDE7320, 0xffE68329, 0xff7B2768, 0xff5A2908, 0xffFFEEAC, 0xffFFEE7B, 0xffF6EE6A, 0xffB45220, 0xffEE5A41, 0xffEE4A31, 0xffDE3920, 0xffCD3110, 0xffCD3918, 0xff4A3941, 0xff524141, 0xff7B4A29, 0xff4A739C, 0xff527B9C, 0xff947339, 0xff52737B, 0xffD5AC8B, 0xff6A4120, 0xff622018, 0xff5A2018, 0xffA45239, 0xffFFB47B, 0xffBD5A10, 0xffD56210, 0xffF67331, 0xffEE7329, 0xffEE6A20, 0xffE66A18, 0xffF65A20, 0xffEE5A18, 0xffDE4A08, 0xffDE5A18, 0xffD55218, 0xffEE6A41, 0xffD56220, 0xffC56A31, 0xffBD5A29, 0xffC55A29, 0xffBD6229, 0xff6A3110, 0xffEEDEAC, 0xffF6E6A4, 0xffF6EE73, 0xffEEE67B, 0xffE6CD83, 0xff732008, 0xffBD4A20, 0xffF64A29, 0xffDE5A39, 0xffC53118, 0xffBD2910, 0xffC53920, 0xffBD5231, 0xffCD835A, 0xff527BA4, 0xff5A7BA4, 0xff416294, 0xff949CB4, 0xffA4B4B4, 0xff393118, 0xff7B6229, 0xff6A8B9C, 0xffCD8B5A, 0xffDEB494, 0xff522000, 0xff5A2008, 0xffE69C73, 0xffE68B41, 0xffDE6210, 0xffF67329, 0xffFF8339, 0xffF68B4A, 0xffFF9441, 0xffEE7B29, 0xffE66A10, 0xffDE6A10, 0xffE67B29, 0xffDE5220, 0xffCD5218, 0xffBD4A08, 0xffA43108, 0xffD56241, 0xffC55231, 0xffAC3920, 0xffAC4129, 0xff941808, 0xff522768, 0xffB49C6A, 0xffF6E694, 0xffF6EE7B, 0xffFFF67B, 0xff7B1808, 0xffC54120, 0xffE65220, 0xffFF6241, 0xffE63920, 0xffCD5239, 0xffD55A41, 0xffDE7B52, 0xff5A1800, 0xff623929, 0xffDE8B62, 0xff524A52, 0xff5273A4, 0xff4A73A4, 0xff4A6A9C, 0xff837331, 0xff7B6A41, 0xffC59C83, 0xff94624A, 0xffEEA47B, 0xffCD6A39, 0xffCD4A00, 0xffEE7320, 0xffEE7B31, 0xffCD5200, 0xffA45220, 0xff942910, 0xffAC2910, 0xffEE8B4A, 0xffE69441, 0xffD5A44A, 0xffA47B31, 0xffE6946A, 0xffE68362, 0xffAC3110, 0xffBD4A10, 0xff8B3768, 0xff8B4A18, 0xffC5AC6A, 0xffCD4120, 0xffCD4108, 0xffCD4A08, 0xffDE5218, 0xffE65A18, 0xffFF7B31, 0xffFF8B41, 0xffFF7B62, 0xffFF6A52, 0xffE66A52, 0xffAC3929, 0xffFF836A, 0xffE64A39, 0xffB43929, 0xffBDAC8B, 0xffEEE6BD, 0xffD5C59C, 0xffC5734A, 0xffC56A4A, 0xffBD624A, 0xffAC6A41, 0xff4A7BA4, 0xff4A73AC, 0xff416A94, 0xff8B9CBD, 0xff8394B4, 0xff839CB4, 0xff7B94B4, 0xff624A08, 0xff8B7331, 0xff5A525A, 0xff5A7B94, 0xff521800, 0xff944118, 0xffA44110, 0xffD55A18, 0xffF67B29, 0xffEE8339, 0xffD55A08, 0xffC56A20, 0xff832010, 0xffCD5241, 0xffEE9C5A, 0xffD58B5A, 0xffC54118, 0xffB43918, 0xffB45A29, 0xffCD6A29, 0xffB44A08, 0xff943100, 0xff8B4118, 0xff5A3108, 0xffCDB47B, 0xffFFF6B4, 0xffF6E68B, 0xffF6EE62, 0xffDE9452, 0xffB43908, 0xffE66A29, 0xffE64A18, 0xffFF7362, 0xffBD2908, 0xffDE4A29, 0xffBD3929, 0xffE65239, 0xffB42920, 0xff731808, 0xffFFEECD, 0xffF6EECD, 0xffE6E6BD, 0xffCDBD9C, 0xffF6CD9C, 0xffEEA483, 0xffF6947B, 0xffCD8B6A, 0xff5A7B9C, 0xff4A7BAC, 0xff527BAC, 0xff5273AC, 0xff5283AC, 0xff5A7BAC, 0xff416A9C, 0xff738BA4, 0xff7B94AC, 0xff839CBD, 0xff7B9CBD, 0xff839CC5, 0xff4A3908, 0xff524108, 0xffE6BD7B, 0xffA45229, 0xffEE6220, 0xffE67329, 0xffE67320, 0xffF69C4A, 0xffFFAC6A, 0xffDE8B39, 0xffE68B39, 0xffD56A20, 0xffC55A10, 0xff732908, 0xffEEEE8B, 0xffFFEE73, 0xffFFD573, 0xffCD8341, 0xffCD5A29, 0xffDE5A20, 0xffE64129, 0xffEE4118, 0xffDE3908, 0xffDE5241, 0xffC52008, 0xff941000, 0xffCD3920, 0xffAC2000, 0xff942008, 0xff7B1000, 0xff621008, 0xffF6DEBD, 0xffE6DEB4, 0xffCDBD94, 0xffDED5AC, 0xffD5735A, 0xffB46A4A, 0xffC58B62, 0xffDE9C73, 0xff4A7BB4, 0xff4173AC, 0xff4173A4, 0xff527BB4, 0xff41739C, 0xff5A739C, 0xff7B9CB4, 0xff7B9CC5, 0xff6A4110, 0xff624108, 0xff4A4A29, 0xff62839C, 0xff6A83A4, 0xff6283A4, 0xff837B5A, 0xff6A735A, 0xff737B9C, 0xff6A7BA4, 0xff73739C, 0xff6273A4, 0xff7B7B94, 0xffB48B73, 0xffA45A31, 0xffBD7331, 0xffC56218, 0xffC54100, 0xffE66218, 0xffF68329, 0xffFF9C52, 0xffD56A18, 0xffBD5208, 0xffAC4A10, 0xff8B3108, 0xffF6F694, 0xffF6EE8B, 0xffF6D57B, 0xffAC5A29, 0xffC51800, 0xffC53100, 0xffC53908, 0xffCD2000, 0xffBD6241, 0xff4A0810, 0xffFFDEC5, 0xffEEC5A4, 0xffCDB48B, 0xffF6DEB4, 0xffEE8362, 0xff202939, 0xff4A83BD, 0xff3973A4, 0xff397BA4, 0xff417BAC, 0xff4A83B4, 0xff4A73B4, 0xff416AB4, 0xff527BBD, 0xff396A9C, 0xff5A83AC, 0xff8BA4BD, 0xff94A4BD, 0xff9CA4BD, 0xff738BAC, 0xff8BA4C5, 0xff5A3768, 0xff6A4A10, 0xff5A83A4, 0xff6283AC, 0xff7B735A, 0xff736A39, 0xff6A5A29, 0xff838B6A, 0xff7383AC, 0xff8383A4, 0xffEEB473, 0xffE6BD94, 0xff7B5241, 0xff944108, 0xffB44108, 0xffFF8329, 0xffE66210, 0xffFF9C4A, 0xffEE8331, 0xffFF8B39, 0xffCD5A10, 0xffC55A18, 0xff8B3100, 0xffFFFFB4, 0xff8B4129, 0xffCD4118, 0xffD53918, 0xffD52918, 0xff9C3120, 0xffDE8362, 0xffC56241, 0xffC55A41, 0xffA43920, 0xffAC6A4A, 0xff100818, 0xffC5947B, 0xffCDA483, 0xffEED5AC, 0xffE6AC83, 0xffDEA473, 0xffE6A473, 0xffEE9C62, 0xffCD7339, 0xffA46A4A, 0xff292031, 0xff947362, 0xff396AAC, 0xff4183BD, 0xff417BB4, 0xff417BA4, 0xff4183B4, 0xff5273B4, 0xff4183AC, 0xff397BAC, 0xff527BC5, 0xff4A73BD, 0xff4A7BBD, 0xff5283B4, 0xff7B8BAC, 0xff9CB4BD, 0xff94ACBD, 0xff83A4C5, 0xff83A4CD, 0xff5A3910, 0xff7B7B62, 0xff628BA4, 0xff6283B4, 0xff6A8BBD, 0xff948B62, 0xff837B52, 0xff8B7B52, 0xff9C9462, 0xff9C945A, 0xff736A29, 0xff625A18, 0xff837B41, 0xff7B6A52, 0xff6A8B7B, 0xff6A83AC, 0xff7B83A4, 0xff412931, 0xffBD4110, 0xffDE5210, 0xffF66A18, 0xffF66A10, 0xffE65208, 0xffEE7B20, 0xffF68B29, 0xffFF9439, 0xffFF8331, 0xffDE5A08, 0xffE65A10, 0xffDE5208, 0xffD55200, 0xffC54A08, 0xffC55210, 0xff6A2000, 0xffF6EEC5, 0xffFFFFBD, 0xffF6FFAC, 0xffF6EEA4, 0xffDE5231, 0xffCD4A29, 0xffC56239, 0xffCD734A, 0xffCD4129, 0xffB42008, 0xffDE4A31, 0xffD54131, 0xffD57B62, 0xffB45231, 0xffAC3129, 0xffDE6252, 0xff411820, 0xff833120, 0xffAC6252, 0xffE6B494, 0xffF6DEAC, 0xffEEC594, 0xffDE8B5A, 0xffA46252, 0xff5A4141, 0xff4A394A, 0xff4A527B, 0xff6A7BB4, 0xff5A83C5, 0xff3973B4, 0xff3173AC, 0xff5273BD, 0xff4A7BC5, 0xff417BBD, 0xff4A83AC, 0xff94ACC5, 0xff94A4C5, 0xff83A4BD, 0xff8BA4CD, 0xff5A4100, 0xff5A4108, 0xff4A3100, 0xff7B6A29, 0xff627BA4, 0xff738BC5, 0xff627BBD, 0xff628BC5, 0xff6283BD, 0xff628BBD, 0xff628BAC, 0xff6A836A, 0xff4A5A4A, 0xff5A6A52, 0xff625208, 0xff8B7B18, 0xff7B6210, 0xff7B6220, 0xff6A6A41, 0xff8B836A, 0xff838B73, 0xff7383A4, 0xff6A949C, 0xff527B83, 0xff6A7B5A, 0xff525A39, 0xff9C6A5A, 0xff943918, 0xff9C2768, 0xffE65200, 0xffEE5A00, 0xffEE7B18, 0xffFF8B29, 0xffFF8B31, 0xffFF7B29, 0xffEE5A10, 0xffDE4A00, 0xffD54100, 0xffD54A00, 0xffC54A00, 0xffCD5210, 0xffDE6229, 0xffBD5210, 0xffAC5210, 0xff7B3108, 0xffFFFFC5, 0xffF6FFB4, 0xffEEEEAC, 0xffBD5A31, 0xffD56239, 0xffF6A483, 0xffF68B62, 0xffD54A39, 0xffD55A52, 0xff9C4A39, 0xffF6D5A4, 0xffDE9C6A, 0xffDE9462, 0xffAC624A, 0xffFFEEDE, 0xff291831, 0xff5283BD, 0xff949CBD, 0xff94ACD5, 0xff4A2768, 0xff735A10, 0xff523100, 0xff4A3920, 0xff6A5A18, 0xff736A41, 0xff737362, 0xff7B83B4, 0xff6A83BD, 0xff6A8BB4, 0xff6A7B62, 0xff9C8341, 0xff8B7320, 0xffA49431, 0xff9C8B29, 0xff947B31, 0xffBDA462, 0xff8B8B4A, 0xff7B7B41, 0xff5A7B73, 0xff83835A, 0xff5A5A29, 0xffE6C58B, 0xffBD6A41, 0xffA43908, 0xffAC3100, 0xffBD3768, 0xffD55208, 0xffEE6A10, 0xffEE7318, 0xffF67318, 0xffE65210, 0xffB45210, 0xff944A10, 0xffCD6A4A, 0xffD57352, 0xff9C3929, 0xff622920, 0xff83524A, 0xffD5A47B, 0xffE6B48B, 0xffEEBD8B, 0xffDE945A, 0xffCD7B52, 0xffAC5A41, 0xff8B4A39, 0xff414A62, 0xff3983BD, 0xff3983B4, 0xff4183C5, 0xff4A7BCD, 0xff4A83C5, 0xff528BBD, 0xff94ACCD, 0xff83A4D5, 0xff8BACD5, 0xff6A5208, 0xff523768, 0xff838331, 0xff837B31, 0xff626A52, 0xff947320, 0xff836210, 0xff735208, 0xff8B6A20, 0xff836218, 0xff9C8329, 0xff836A18, 0xff947B29, 0xff7B5A10, 0xff9C8B31, 0xff948341, 0xff948362, 0xff6A5A62, 0xffE6AC6A, 0xff834129, 0xffBD7B52, 0xffAC5218, 0xff8B2000, 0xffA43100, 0xffB44100, 0xffEE6210, 0xffEE6A18, 0xffD55210, 0xffFFF6AC, 0xffF6F6C5, 0xffDE7B5A, 0xffCD6A52, 0xff7B3118, 0xffEE9C73, 0xffD56A5A, 0xffBD6A52, 0xff395273, 0xff4173BD, 0xff417BCD, 0xff417BC5, 0xff397BBD, 0xff4173C5, 0xff4183CD, 0xff528BC5, 0xff6A8BAC, 0xff7B9CAC, 0xff83A4B4, 0xff8BACC5, 0xff839CCD, 0xff624A00, 0xff9C7B29, 0xff946A31, 0xff4A5241, 0xff837329, 0xff5A4A00, 0xff4A4A18, 0xff838352, 0xff8B7318, 0xff836208, 0xff9C7B20, 0xff947329, 0xff7B6218, 0xff9C7329, 0xff735200, 0xff735A00, 0xff8B7329, 0xff8B7B39, 0xff6A7341, 0xff6A4A00, 0xff946A20, 0xffAC8352, 0xff9C4A20, 0xffC57331, 0xffC57B41, 0xffDE9C5A, 0xffCD7B4A, 0xffAC4108, 0xff9C3768, 0xffCD5208, 0xffE65A20, 0xffC54108, 0xffA43768, 0xff943910, 0xffEEE6AC, 0xffFFFFAC, 0xffF6EEBD, 0xffA44A31, 0xffE68352, 0xffBD4129, 0xffBD8B5A, 0xffD57B52, 0xff100010, 0xff201031, 0xff525A83, 0xff5A73A4, 0xff4A8BC5, 0xff528BCD, 0xff5283C5, 0xff5A8BC5, 0xff7394A4, 0xff7BA4D5, 0xff6A5210, 0xff7B5A08, 0xff835A08, 0xff835A10, 0xff835A18, 0xff737B52, 0xff8B8362, 0xff836A20, 0xff83734A, 0xff838B5A, 0xff8B8B5A, 0xff9C8B52, 0xffA48B52, 0xff836220, 0xff947318, 0xff7B5210, 0xff835A31, 0xff6A4A08, 0xff7B5A18, 0xff8B6A10, 0xff7B6208, 0xff836A10, 0xff5A4A08, 0xff7B7331, 0xff7B7339, 0xff737341, 0xff94834A, 0xff8B5A39, 0xffDE9C83, 0xff9C5A31, 0xffC57B31, 0xffCD7B31, 0xffCD8B4A, 0xffCD9C7B, 0xffDEA483, 0xffD58B62, 0xffAC4100, 0xffC54A10, 0xffCD3768, 0xffD54A10, 0xffBD4100, 0xffBD4108, 0xffAC3910, 0xff832908, 0xffF6F6AC, 0xff6A2918, 0xff9C4A31, 0xffBD5A4A, 0xffB45A41, 0xffA44129, 0xff8B3110, 0xff9C3910, 0xffC59C73, 0xffCD6A41, 0xffCD6239, 0xffC55A39, 0xff414173, 0xff5A7BB4, 0xff3983C5, 0xff4A83D5, 0xff4A8BBD, 0xff418BCD, 0xff4A8BCD, 0xff6A8BA4, 0xff7B83AC, 0xff7B5218, 0xff4A5239, 0xff6A6A39, 0xff8B6A18, 0xff734A00, 0xff835A20, 0xff6A5A10, 0xff6A5A08, 0xff736210, 0xff7B5A00, 0xff7B5200, 0xff5A2768, 0xff7B6A08, 0xff838339, 0xff736A18, 0xff7B6A10, 0xff7B6A18, 0xff736218, 0xff837339, 0xffAC8329, 0xffCD8B39, 0xffBD8362, 0xffD5B4A4, 0xffF6D5CD, 0xffBD735A, 0xffAC3768, 0xffB43768, 0xffCD4100, 0xffAC4110, 0xff731800, 0xffCD5A31, 0xffDE5A41, 0xffD54A31, 0xffC53929, 0xffAC3120, 0xff8B2018, 0xffCD946A, 0xffD59C73, 0xff101029, 0xff317BC5, 0xff398BD5, 0xff397BC5, 0xff4173B4, 0xff4A83A4, 0xff398BCD, 0xff5283CD, 0xff7394B4, 0xff838BB4, 0xff8B94B4, 0xffACBDC5, 0xff8BACCD, 0xff83ACDE, 0xff6A5200, 0xff524100, 0xff9C7B41, 0xff947331, 0xff8B7B29, 0xff8B6A08, 0xff5A5208, 0xff7B7329, 0xff6A5A00, 0xff624100, 0xffA47329, 0xffBD9439, 0xffA47B18, 0xff946A18, 0xffC5A46A, 0xffBD3100, 0xffAC3108, 0xffB44118, 0xff942000, 0xff8B2768, 0xff7B2000, 0xff621800, 0xff733129, 0xff6A2018, 0xffCD9C73, 0xffCD8B62, 0xffCD7341, 0xffBD6231, 0xff181839, 0xff3983CD, 0xff4A83CD, 0xff628B94, 0xff5A8BA4, 0xff5A839C, 0xff5A83B4, 0xff5A8394, 0xff5A8BB4, 0xff5283A4, 0xff528BB4, 0xff6A94B4, 0xff6A94AC, 0xff7394AC, 0xff737394, 0xffB4C5CD, 0xff94ACDE, 0xff8BACDE, 0xff94B4DE, 0xff94B4D5, 0xff83ACD5, 0xff83A4DE, 0xff312768, 0xff948331, 0xff4A3768, 0xff9C6218, 0xffCD8373, 0xffA47B6A, 0xff7B4120, 0xffA42908, 0xff8B1800, 0xff8B2908, 0xff6A2910, 0xffEEEEC5, 0xffEEEEB4, 0xffBD6A39, 0xff31314A, 0xff528BAC, 0xff5A8B9C, 0xff737B5A, 0xff7B8362, 0xff62735A, 0xff6A7352, 0xff418BC5, 0xff6A83B4, 0xff5A8BBD, 0xff204152, 0xff628BB4, 0xff4A5A41, 0xff203118, 0xff313920, 0xffB4BDCD, 0xff8BA4D5, 0xff4A4A10, 0xff8B6208, 0xff835A00, 0xff734A10, 0xff734A08, 0xff6A4100, 0xff8B6A29, 0xff7B5208, 0xff837320, 0xff946218, 0xff9C6A20, 0xff7B4100, 0xff623100, 0xff623108, 0xff8B5220, 0xffE69C6A, 0xffD58B52, 0xffDE8B41, 0xffC56220, 0xffDED5A4, 0xff081018, 0xffD5946A, 0xff5A3129, 0xff5A6A4A, 0xff6A6A4A, 0xff73734A, 0xff4A4A20, 0xff6A6241, 0xff628B9C, 0xff739CBD, 0xff6294C5, 0xff4A6A73, 0xff5A83BD, 0xff393100, 0xff5A6252, 0xffA4B4C5, 0xff94B4CD, 0xff4A4108, 0xff524A08, 0xff7B7318, 0xff9C7B10, 0xff9C7B18, 0xff947B20, 0xffA48320, 0xff946A10, 0xff9C7310, 0xff947310, 0xffA48329, 0xff8B6210, 0xff9C6210, 0xff8B5A08, 0xff8B5A18, 0xff946231, 0xffEEB47B, 0xffE6A462, 0xff5A3939, 0xff9C4A29, 0xffEE9C4A, 0xffF6AC62, 0xffE69452, 0xffBD4A18, 0xff9C3100, 0xff832000, 0xff621000, 0xff7B3910, 0xff6A3910, 0xff4A4152, 0xff7B7341, 0xff6A6231, 0xff628BCD, 0xff6A83C5, 0xff52839C, 0xff528394, 0xff4A6241, 0xff627341, 0xff525A20, 0xff4A524A, 0xff627BAC, 0xff415241, 0xff394A31, 0xff5A624A, 0xff394139, 0xff5294CD, 0xff5A7BBD, 0xff6A8BC5, 0xff7394BD, 0xff4A5231, 0xff9CACC5, 0xffA4ACC5, 0xff83ACCD, 0xff8B6239, 0xff736A10, 0xff5A5200, 0xff625200, 0xff836200, 0xffA48331, 0xff7B5220, 0xffAC7329, 0xffCD9C41, 0xff7B4A08, 0xffE6AC73, 0xff5A3131, 0xffF6A452, 0xffD57B41, 0xff9C3108, 0xffD59473, 0xffE6A47B, 0xff734A29, 0xff947B52, 0xff626A41, 0xff4A5220, 0xff414110, 0xff626241, 0xff393929, 0xff528BD5, 0xff5A8BCD, 0xff62624A, 0xff525A4A, 0xff627362, 0xff8BB4D5, 0xff94B4E6, 0xff94ACE6, 0xff7BACDE, 0xff8B7B31, 0xff524A00, 0xff8B8320, 0xff948B20, 0xffA49429, 0xff836A08, 0xff8B7310, 0xffA47320, 0xff9C6A18, 0xff733910, 0xffC58339, 0xffBD8339, 0xff8B5229, 0xffD57B39, 0xffFFAC5A, 0xffFFAC62, 0xffFFBD73, 0xffFFC573, 0xffF6BD73, 0xffE68B52, 0xffA44A18, 0xff832768, 0xff181800, 0xff946252, 0xff6A3108, 0xff8B8B62, 0xff6A4108, 0xff6A6A29, 0xff393768, 0xff948B5A, 0xff4A4100, 0xff414A31, 0xff5294D5, 0xff4A8BD5, 0xff418BD5, 0xff5A94CD, 0xff393908, 0xff393910, 0xff313100, 0xff626239, 0xff9CB4C5, 0xff9CB4D5, 0xff9CB4DE, 0xff8BB4DE, 0xff736208, 0xff735A08, 0xff8B6218, 0xffFFB45A, 0xffFFBD6A, 0xffF6BD6A, 0xffF6C573, 0xffEEA46A, 0xff4A4139, 0xff414A39, 0xff622768, 0xff837B4A, 0xff8B7B41, 0xff7B7B4A, 0xffA49462, 0xff4A94D5, 0xff4A94DE, 0xff5A94C5, 0xff527B8B, 0xff525A31, 0xff526A62, 0xff6294BD, 0xff6294B4, 0xff6294A4, 0xff8BACBD, 0xff9CB4CD, 0xff947B18, 0xffB4947B, 0xff73525A, 0xffFFBD83, 0xffF6B46A, 0xffF6B462, 0xffFFC56A, 0xffFFC57B, 0xffF69C52, 0xffEE8341, 0xffB43910, 0xff7B1800, 0xff624A52, 0xff182008, 0xffB47B52, 0xff9C6252, 0xff948B41, 0xff626218, 0xff5A5A08, 0xff736A20, 0xff414118, 0xff5294DE, 0xff4A94CD, 0xff294141, 0xff736241, 0xff5A94BD, 0xff5A94AC, 0xff524A31, 0xff948318, 0xff836A62, 0xff7B5A5A, 0xffF6C56A, 0xffFFCD7B, 0xffCD6229, 0xffAC4A18, 0xff523941, 0xff394131, 0xffA45A4A, 0xff622020, 0xff9C5A4A, 0xff7B734A, 0xff737339, 0xff6A6220, 0xff313108, 0xff6A6218, 0xff5A5A10, 0xff413768, 0xff529CCD, 0xff52624A, 0xff623768, 0xff5A8BAC, 0xff8B947B, 0xff8BB4E6, 0xff83ACE6, 0xff837318, 0xff5A3941, 0xffF6CD7B, 0xffFFB462, 0xffFFA45A, 0xffEE944A, 0xffDE7B39, 0xffE68341, 0xffDE834A, 0xff5A5A31, 0xff948339, 0xff414108, 0xff5294BD, 0xff8BACE6, 0xff9C8B41, 0xff9C8339, 0xffBDAC7B, 0xffFFE69C, 0xffF6DE94, 0xffFFD58B, 0xffFFCD83, 0xffF6A462, 0xffEEA45A, 0xffFFB46A, 0xffE69C7B, 0xff836A6A, 0xffB4A46A, 0xffB4944A, 0xffAC836A, 0xff9C834A, 0xff396283, 0xff4A7B9C, 0xff5A94B4, 0xff202908, 0xff9CACA4, 0xff8B8329, 0xff9C944A, 0xff73524A, 0xffFFDE9C, 0xffFFCD8B, 0xffACA46A, 0xffC5A462, 0xff6A3908, 0xff414A29, 0xff182000, 0xff8B8339, 0xffEED5A4, 0xffF6D594, 0xffFFD594, 0xffA46A41, 0xff835210, 0xffA48B29, 0xffA48B73, 0xffAC8373, 0xff8B5A10, 0xff8BB4EE, 0xff83B4E6, 0xffA48B20, 0xff8B7308, 0xff837308, 0xff7B6200, 0xff8B7B10, 0xff836262, 0xff835A5A, 0xffE6C594, 0xff52414A, 0xff8B6A41, 0xff7B4A10, 0xff292768, 0xff9CA4C5, 0xff9CB4B4, 0xffACC5C5, 0xff94BDE6, 0xff83B4DE, 0xff94B4EE, 0xff837310, 0xff948329, 0xff8B8318, 0xff736A08, 0xff8B7B20, 0xffF6C5A4, 0xffEEBD9C, 0xffEECDB4, 0xffAC947B, 0xff312031, 0xffEE9452, 0xffF69C62, 0xff734108, 0xffACBDCD, 0xffA4BDC5, 0xff8B9CC5, 0xff83ACB4, 0xff9CACCD, 0xff9CACD5, 0xff94ACEE, 0xff83B4EE, 0xff6A6A10, 0xff625A00, 0xff948B29, 0xff625A08, 0xff9C7318, 0xff734A4A, 0xff8B5A52, 0xffE6A46A, 0xffEEAC5A, 0xffDE9473, 0xff945A20, 0xffC57B52, 0xff5A3100, 0xffA47B39, 0xff525241, 0xff8BA49C, 0xffACACCD, 0xff9C9CBD, 0xffA4ACCD, 0xffA4B4CD, 0xffA4B4D5, 0xffACBDD5, 0xffB4BDDE, 0xffACB4CD, 0xffB4BDD5, 0xffA4BDCD, 0xff9CBDD5, 0xff626220, 0xff7B7320, 0xffA4736A, 0xffAC7B6A, 0xffC58B7B, 0xffE69C83, 0xffF6A47B, 0xffF69C5A, 0xffE68B4A, 0xffA46241, 0xffAC7331, 0xffC57B4A, 0xffCD8362, 0xffD5947B, 0xffA46239, 0xffACACD5, 0xffA4A4CD, 0xffA4ACD5, 0xffA4BDD5, 0xff9CBDCD, 0xff94B4C5, 0xff94BDD5, 0xff8BBDE6, 0xff8BBDEE, 0xff94BDEE, 0xffFFBD8B, 0xffFFB48B, 0xffEEB462, 0xff4A2000, 0xffD58B73, 0xff622008, 0xff94A4D5, 0xff9CA4CD, 0xff9CBDC5, 0xffB4C5D5, 0xffA4A4C5, 0xffACB4D5, 0xff94A4CD, 0xff83B4D5, 0xff7BB4E6, 0xff83BDEE, 0xff73ACE6, 0xff83B4F6, 0xff83ACF6, 0xff8BB4F6, 0xff83ACEE, 0xff83BDE6, 0xff626210, 0xff6A6210, 0xffA49C4A, 0xff838329, 0xff837B20, 0xff9C9439, 0xffF6B47B, 0xffF6AC5A, 0xffF6B45A, 0xffF6BD62, 0xff6A6239, 0xffA4834A, 0xff622000, 0xff834A20, 0xff7B4108, 0xff94B4BD, 0xffA4BDDE, 0xff8BB4CD, 0xff7BB4EE, 0xff94BDFF, 0xff83A4EE, 0xff8BACEE, 0xff6A6A31, 0xff737310, 0xff737320, 0xffE6834A, 0xffB4836A, 0xffEEB494, 0xff834118, 0xff94BDC5, 0xff9CBDEE, 0xff4A4A00, 0xff736200, 0xffEED594, 0xffF6DE9C, 0xffF6C583, 0xffD57331, 0xffCD6A31, 0xff944A20, 0xff834110, 0xff525A41, 0xff949CC5, 0xffACC5CD, 0xffA4C5D5, 0xff839C94, 0xff202768, 0xff94BDDE, 0xffAC8B31, 0xffBD9473, 0xffFFEE9C, 0xffEEBD73, 0xffBD6A4A, 0xff945A39, 0xffA46A52, 0xffCD834A, 0xffAC6239, 0xff9C5220, 0xff6A3768, 0xffAC8B4A, 0xffB4B4CD, 0xff9C947B, 0xffACC5D5, 0xff9CBDDE, 0xff737B62, 0xff414A10, 0xff414A18, 0xff4A4A08, 0xff8BBDDE, 0xff7BB4DE, 0xff73A4DE, 0xff835A52, 0xffFFDE94, 0xffEEDE8B, 0xffEE8B52, 0xffD5734A, 0xffD58B4A, 0xffAC5A31, 0xff944A18, 0xffA45A29, 0xff946208, 0xff9C6A10, 0xffACA4BD, 0xff83947B, 0xff7BACE6, 0xff8BBDF6, 0xff735A6A, 0xffB46231, 0xffF6E69C, 0xffC56A41, 0xffA44A20, 0xff944120, 0xff733118, 0xffF6B473, 0xffB46A31, 0xffB48329, 0xff9CC5DE, 0xff947308, 0xff9C8318, 0xffAC5229, 0xffF6D583, 0xffF6C57B, 0xff9C6229, 0xff8B835A, 0xffB4AC8B, 0xff949473, 0xff9C9473, 0xff948B73, 0xff8B7B5A, 0xffB45241, 0xff944A39, 0xffC59473, 0xffF6CD83, 0xffA46A18, 0xff94835A, 0xff9C946A, 0xff6A4131, 0xff9C8320, 0xff4A3139, 0xff6A414A, 0xffC5AC83, 0xffAC4118, 0xffFFE6C5, 0xffAC6A52, 0xffA48318, 0xffAC7B20, 0xffB4AC73, 0xffA4C5DE, 0xffB44A29, 0xffD58B6A, 0xffB46A41, 0xffA47B20, 0xff946210, 0xff835208, 0xff8B9473, 0xff7B4A41, 0xff7B3120, 0xffA45A41, 0xffFFD583, 0xffE6C57B, 0xffEED58B, 0xffEEC57B, 0xffA48B4A, 0xffFFA483, 0xffCD5A4A, 0xffB46239, 0xff6A3139, 0xff623939, 0xffEECD7B, 0xffBD9C4A, 0xffAC9452, 0xff947B10, 0xff7B4A00, 0xffB48373, 0xffEE9C83, 0xffEE8B6A, 0xff6A3939, 0xffFFDE8B, 0xffF6DE8B, 0xff625A10, 0xffBD7B6A, 0xffCD7B6A, 0xffEE734A, 0xffCD6231, 0xffCD5A20, 0xff8B4131, 0xff8B6200, 0xffAC5A4A, 0xffCD4A31, 0xffBD5220, 0xff6A3129, 0xffFFE694, 0xffE6BD73, 0xffDEA45A, 0xff946A4A, 0xff833118, 0xffEEB46A, 0xff733908, 0xffB49439, 0xffAC7362, 0xffAC4A20, 0xff623131, 0xffE69C5A, 0xffB49431, 0xffAC3918, 0xff732918, 0xff833939, 0xffA46220, 0xffB47B29, 0xff835200, 0xff5A394A, 0xff6A4A5A, 0xffF6CD73, 0xff8B5218, 0xffAC6A29, 0xffCD8331, 0xffB47318, 0xffB47B20, 0xffA47318, 0xff9C8B4A, 0xffE6C583, 0xffEEC573, 0xffE69C52, 0xffBD8B39, 0xffBD8329, 0xff9C6208, 0xffAC8B29, 0xffD59C7B, 0xff8383AC, 0xff7B7B9C, 0xffEEBD6A, 0xffBD6A31, 0xff734100, 0xff948B4A, 0xffAC8B39, 0xffEECD8B, 0xff945220, 0xff834A10, 0xff737318, 0xff949462, 0xffCD9C4A, 0xff6A6208, 0xff7B7B20, 0xff836A00, 0xff8B7300, 0xffFFCD73, 0xff835218, 0xffD5AC5A, 0xff291829, 0xffDEA452, 0xffEEAC62, 0xff7B4118, 0xffDEBD62, 0xff9C9441, 0xffE69C4A, 0xffB48320, 0xffBD9431, 0xffD5BD8B, 0xff948320, 0xffDE9C4A, 0xffDE9441, 0xffBD7339, 0xff7B3908, 0xffB49441, 0xffA47B08, 0xffAC7B10, 0xffBD8B29, 0xffC5B483, 0xffD58B39, 0xffCD7B41, 0xff8B4110, 0xff834A18, 0xffAC8B20, 0xffAC8B10, 0xffB48B10, 0xffAC7B18, 0xffE6A45A, 0xffB49452, 0xffAC8320, 0xffEE9C52, 0xff7B4110, 0xffB49C39, 0xffCDA439, 0xffAC8310, 0xffBD8B31, 0xff946A08, 0xffB48B29, 0xffCDA441, 0xffE69C39, 0xff733100, 0xffDEB4A4, 0xffEEA452, 0xff9C5229, 0xffB47329, 0xffBD9C39, 0xffD58329, 0xffD58B41, 0xffD58331, 0xffE6944A, 0xffCD8329, 0xffAC8B52, 0xff8B5208, 0xffAC6A20, 0xffF6EEB4, 0xffD58339, 0xff525208, 0xffDE8B4A, 0xffA46218, 0xffBDA45A, 0xffEEDE9C, 0xffC56229, 0xffA48B39, 0xffC5944A, 0xffC59431, 0xffDEAC4A, 0xffA4836A, 0xff201831, 0xffE6CD8B, 0xffDE8339, 0xffC56A29, 0xff9C8331, 0xffA48B31, 0xffC59C31, 0xffD5944A, 0xffDEB46A, 0xffA49439, 0xffB49C29, 0xffA46A20, 0xffA48352, 0xffDEB462, 0xffCDAC62, 0xffDEAC62, 0xff8B8331, 0xff9C9C41, 0xff7B7B29, 0xff525210, 0xff837B39, 0xffE6B462, 0xffDEB45A, 0xffCD7329, 0xffAC7318, 0xffBD8320, 0xff080818, 0xff081020, 0xff945A31, 0xffA49C29, 0xffA49418, 0xff9C9418, 0xffDEAC52, 0xffEEBD62, 0xffD58341, 0xff9C8B18, 0xffA49C20, 0xff9C8310, 0xff947B08, 0xffB49429, 0xff837B08, 0xff948B18, 0xffE6AC52, 0xffE6B45A, 0xff8B6A00, 0xffA45A18, 0xffA46A10, 0xff8B5A00, 0xff6A6200, 0xff837B18, 0xffD57329, 0xffCD7331, 0xffC59C41, 0xffC5A452, 0xffC59439, 0xffAC6218, 0xffE69439, 0xffE69431, 0xffEE9C39, 0xffE68B31, 0xffD59439, 0xffC58320, 0xffBD7B20, 0xffC58331, 0xffCD8B31, 0xffB47320, 0xffEEB45A, 0xffBD9C62, 0xffD5B462, 0xffDE7B31, 0xffC59420, 0xffBD8B18, 0xff946A00, 0xffC58B39, 0xffC57B29, 0xffC57320, 0xffB47310, 0xffDEA439, 0xffF6AC4A, 0xff9C5200, 0xff945A10, 0xffCD8B29, 0xffBD7318, 0xffD58B29, 0xffEEAC52, 0xff733108, 0xffE6BD6A, 0xffD57B29, 0xffBD6218, 0xffBD6A29, 0xffB46229, 0xffB48310, 0xff947300, 0xffBD7B29, 0xffA45A08, 0xffE6AC4A, 0xffEEA44A, 0xffE69C41, 0xffDE9431, 0xffF6BD5A, 0xffDE9C52, 0xffCDA44A, 0xffD5AC52, 0xffE6BD62, 0xffA45A20, 0xff9C7308, 0xffBD9420, 0xffBD9418, 0xffA48308, 0xffAC9420, 0xffAC8318, 0xff945210, 0xffDEA44A, 0xffDE944A, 0xffF6AC52, 0xffDE9439, 0xffBD7320, 0xffD58B31, 0xffE6A441, 0xffE6AC41, 0xffD59441, 0xff8B5210, 0xff412029, 0xff391820, 0xffA47B10, 0xffAC8B18, 0xffAC7B62, 0xffD59C4A, 0xff836A7B, 0xffEEC56A, 0xffB45229, 0xffDE8B52, 0xff945208, 0xffB46218, 0xffB46A18, 0xffD5AC4A, 0xffAC7320, 0xff9C5A18, 0xffC59C39, 0xffD59431, 0xffE6A452, 0xffEEB452, 0xffEEB44A, 0xffEEB439, 0xffEEB441, 0xffC57310, 0xffBD6220, 0xffCD9C31, 0xffB48B18, 0xffB48B20, 0xff392939, 0xffDEC594, 0xff9C4108, 0xffAC5A10, 0xffB47308, 0xffAC9439, 0xffA49452, 0xffC58B29, 0xffCD9431, 0xffE6A44A, 0xff9C4A00, 0xffA45218, 0xffAC6229, 0xffDE9C41, 0xffDEA431, 0xffDE9C39, 0xffCD9441, 0xffB46A20, 0xff9C5A08, 0xff8B4A10, 0xffBD9429, 0xff9C7300, 0xffC59C20, 0xffBD8B20, 0xffA47300, 0xffA47308, 0xffB48B7B, 0xffB47B62, 0xffEE8B41, 0xffAC6A18, 0xffCD7B29, 0xffE6BD5A, 0xffC59429, 0xffC58B20, 0xffDE9C31, 0xffAC5A20, 0xffB46A29, 0xffAC8B08, 0xffAC8300, 0xffB48318, 0xffD59C41, 0xffA47310, 0xffB47B6A, 0xff837B29, 0xff8B8341, 0xff947B8B, 0xff9C6A62, 0xffF6A44A, 0xffFFA441, 0xffFF9C41, 0xffFFA44A, 0xffF69439, 0xffF68331, 0xffDE7329, 0xff41314A, 0xffDEC57B, 0xffD5B45A, 0xffF6D5BD, 0xff946200, 0xffCD9439, 0xffBD8B10, 0xffD5A420, 0xffC58B10, 0xffCD9418, 0xffC59418, 0xffA48310, 0xffBDA429, 0xffDEB441, 0xffD59C39, 0xffDEA441, 0xff9C7B00, 0xffB49420, 0xffFFAC4A, 0xffFFAC52, 0xff524152, 0xffF6CD62, 0xffF6D5B4, 0xffCD9429, 0xffD5A441, 0xffCDAC29, 0xffBDAC20, 0xffB4A429, 0xff9C7B08, 0xffAC9431, 0xff8B5200, 0xffC58B31, 0xffCD9C39, 0xffCD9C29, 0xff834108, 0xff8B4A08, 0xffB48308, 0xffCD9420, 0xffD59C31, 0xffA48373, 0xff733768, 0xffFF9C39, 0xffF69C41, 0xffD57B31, 0xffF6CD6A, 0xffF6DEC5, 0xffD59C83, 0xffBD9C29, 0xffB49C20, 0xff9C8B10, 0xff948B39, 0xffB47B08, 0xffB47B18, 0xffAC6A10, 0xffB48B6A, 0xffCDB473, 0xffFF9C31, 0xffF69C39, 0xffF68B31, 0xffCDAC6A, 0xffAC4A29, 0xffBD9C31, 0xffD59429, 0xffC58318, 0xffD5AC39, 0xffA46A08, 0xffC5A420, 0xffEEBD41, 0xffAC6241, 0xffC5AC52, 0xffCDB452, 0xffC58B18, 0xffD5A431, 0xffAC9C52, 0xffB49C62, 0xffF69441, 0xffFFB452, 0xffD5BD6A, 0xffEECD6A, 0xffEEEEDE, 0xffFFFFE6, 0xffEEBD29, 0xffE6A418, 0xffDE9C18, 0xffF6B441, 0xffB47B10, 0xffCDB439, 0xffEEC531, 0xffEEC520, 0xffDEBD10, 0xffD5B418, 0xffDEBD31, 0xffDEAC39, 0xffD5A429, 0xffBD8310, 0xff945A08, 0xffCDB441, 0xffBDA431, 0xffC5A45A, 0xffAC7B08, 0xffCDA431, 0xffAC6210, 0xffBD7329, 0xffEEAC83, 0xff833908, 0xffF6A441, 0xffFFBD62, 0xffC5A44A, 0xffE6C5B4, 0xffEEFFEE, 0xffEEF6E6, 0xffCDAC31, 0xffD5AC18, 0xffDEA418, 0xffBD8B08, 0xffCDB418, 0xffE6C510, 0xffDEC508, 0xffDEBD00, 0xffD5BD10, 0xffDEBD39, 0xffA47B00, 0xffC58329, 0xffAC9429, 0xffA4945A, 0xff9C6A08, 0xffE6B452, 0xff9C5208, 0xffB45A20, 0xffEEFFF6, 0xffE6EEE6, 0xffD5AC20, 0xffDEB44A, 0xffCDA429, 0xffE6BD10, 0xffCDA400, 0xffD5AC10, 0xffCDAC18, 0xffDEB431, 0xffC5A429, 0xffCD9C18, 0xffE6AC31, 0xffBD8308, 0xffE6B420, 0xffDEAC29, 0xffDEAC31, 0xffC5A439, 0xffB49418, 0xffA46210, 0xffFFBD5A, 0xffB45A31, 0xff412939, 0xffFFFFF6, 0xffFFF6F6, 0xffF6E6EE, 0xffBDA49C, 0xff834A08, 0xffBDA439, 0xffC59C29, 0xffD5AC29, 0xffBD9408, 0xffCDA420, 0xffB48B08, 0xffDEAC20, 0xffCD9C10, 0xffD5A410, 0xffC59408, 0xffDEB420, 0xffC59C18, 0xffB48300, 0xffCDA418, 0xffD59C29, 0xffBD8300, 0xffC5AC5A, 0xffC57B10, 0xffCD8320, 0xffEE9C41, 0xffF67B31, 0xffE6AC5A, 0xffB49410, 0xffC5AC18, 0xffAC7310, 0xffDEB439, 0xffC59410, 0xffC58B08, 0xffC58308, 0xffCDA408, 0xffD5B410, 0xffDEBD18, 0xffCDAC10, 0xffAC8308, 0xffCD9410, 0xffD59418, 0xffB49C4A, 0xffEEBD52, 0xffDE8B31, 0xffEE9439, 0xff4A414A, 0xffDEB452, 0xffE6CD6A, 0xffCDBD5A, 0xffE6E69C, 0xffB4A4AC, 0xffEEE6E6, 0xffF6EEEE, 0xffFFFFFF, 0xffF6F6FF, 0xffF6FFFF, 0xffFFF6FF, 0xffFFF6EE, 0xffFFFFEE, 0xff4A3141, 0xff834A00, 0xffD5AC41, 0xffBD9C18, 0xffA48B00, 0xffBDA408, 0xffEEC54A, 0xff9C6A00, 0xffE6BD29, 0xffC5A400, 0xffB48B00, 0xffAC7B00, 0xffBD9410, 0xff101020, 0xffDEAC41, 0xffF6C541, 0xffEEC529, 0xffEED55A, 0xffF6FFEE, 0xffDEE6D5, 0xff9C9C7B, 0xffBD8318, 0xffC59C10, 0xffC5A418, 0xffCDA410, 0xffD5AC31, 0xffEED59C, 0xffE6CD94, 0xffEECD31, 0xffEECD18, 0xffF6D520, 0xffF6DE62, 0xffF6EEE6, 0xffE6E6E6, 0xffF6FFF6, 0xffF6FFE6, 0xffEEE6CD, 0xffCDBD7B, 0xffA49441, 0xffCD9C20, 0xffBDA418, 0xffCDBD31, 0xffD59C20, 0xffD5B441, 0xffE6B431, 0xffD5A418, 0xffD59C18, 0xffB49408, 0xffEEA441, 0xffCD8339, 0xff9C8B39, 0xffF6D541, 0xffF6DE18, 0xffE6CD00, 0xffEED510, 0xffF6DE31, 0xffE6CD4A, 0xffDED58B, 0xffEEF6EE, 0xffEEF6D5, 0xffD5D5A4, 0xffD5D59C, 0xffFFE68B, 0xffF6DE5A, 0xffDEC54A, 0xffF6F6EE, 0xffBD9C00, 0xffB49C00, 0xffC5A408, 0xffC59C00, 0xffB47B00, 0xffBD7B18, 0xffE6D594, 0xffEEDE94, 0xffF6CD52, 0xffF6CD20, 0xffF6D508, 0xffF6DE08, 0xffE6D518, 0xffDECD31, 0xffF6EE9C, 0xffDEEECD, 0xffF6F6E6, 0xffEEDE6A, 0xffEECD62, 0xffFFCD39, 0xffFFD529, 0xffE6C518, 0xffE6CD39, 0xffEEDE73, 0xff9C5A10, 0xffA48300, 0xffD5A439, 0xff9C6200, 0xffCDAC20, 0xffF6B452, 0xffEEA439, 0xffDE9C29, 0xffC5A431, 0xffC57B20, 0xffC57B18, 0xffDECD8B, 0xffFFC562, 0xffFFCD4A, 0xffF6C520, 0xffFFCD10, 0xffFFCD08, 0xffFFDE10, 0xffEED508, 0xffE6CD29, 0xffFFEE8B, 0xffF6EED5, 0xffEED541, 0xffF6DE39, 0xffF6DE29, 0xffEED520, 0xffF6D529, 0xffEECD29, 0xffEED573, 0xffE6D5C5, 0xffCD8B20, 0xffD59420, 0xffDE9C20, 0xffD5BD4A, 0xffFFC55A, 0xffFFD57B, 0xffFFCD6A, 0xffAC944A, 0xffF6C518, 0xffFFD510, 0xffF6CD08, 0xffF6E662, 0xffF6FFC5, 0xffDECD5A, 0xffF6DE6A, 0xffF6D518, 0xffEEC500, 0xffF6CD10, 0xffFFD518, 0xffFFDE31, 0xffE6CD62, 0xff8B4108, 0xffAC7308, 0xffC57329, 0xffF6C562, 0xffFFCD62, 0xffFFCD18, 0xffF6D510, 0xffDECD39, 0xffEEE68B, 0xffEEC541, 0xffF6BD20, 0xffEEBD18, 0xffFFC510, 0xffE6C531, 0xffDEC552, 0xffE6DE94, 0xffE6D5A4, 0xffDECD9C, 0xffEEE6A4, 0xffE6DEBD, 0xffC59C08, 0xffAC5A18, 0xffF6C539, 0xffEECD20, 0xffFFDE18, 0xffFFD508, 0xffFFC508, 0xffEEDE4A, 0xffFFF694, 0xffDEDE9C, 0xffEED56A, 0xffF6CD4A, 0xffF6CD39, 0xffFFC531, 0xffF6C529, 0xffEECD10, 0xffF6CD18, 0xffFFC518, 0xffEEC510, 0xffE6C552, 0xffEEFFFF, 0xffC5B45A, 0xffDEBD5A, 0xffF6BD52, 0xffBD6A20, 0xffA46200, 0xffB46220, 0xffAC5220, 0xffC54A20, 0xffE68331, 0xffFFCD31, 0xffF6DE10, 0xffFFCD00, 0xffF6DE41, 0xffAC9C41, 0xffC5A441, 0xffF6CD31, 0xffEEB400, 0xffFFCD20, 0xffEEC508, 0xffEEBD08, 0xffE6C539, 0xffF6E6D5, 0xff944A08, 0xffBD8B00, 0xffAC6A00, 0xffCD8B18, 0xffDEC562, 0xffE6CDC5, 0xff834100, 0xffA46208, 0xffAC6220, 0xffEEE694, 0xffE6CD7B, 0xffEED583, 0xffFFC54A, 0xffF6C510, 0xffF6D500, 0xffF6DE20, 0xffD5B420, 0xffF6C531, 0xffE6C500, 0xffEECD08, 0xffF6BD08, 0xffE6CD52, 0xff9C736A, 0xffB47300, 0xffBD7B08, 0xffBDA441, 0xffB46A10, 0xffE69C31, 0xffDE9429, 0xffBD6A10, 0xffAC5208, 0xffE6D58B, 0xffB45A18, 0xffF6CD00, 0xffF6E618, 0xffFFE618, 0xffDEB400, 0xffFFEE20, 0xffFFBD08, 0xffFFBD10, 0xffEEBD20, 0xffEECD52, 0xffB46A5A, 0xffD5B44A, 0xffCDAC39, 0xffC5AC29, 0xffCD7B20, 0xffBD6A18, 0xffE6C573, 0xffB45218, 0xffF6C500, 0xffF6BD00, 0xffF6C508, 0xffF6DED5, 0xffD5B452, 0xffDEB429, 0xffD58320, 0xff9C5210, 0xffAC9C6A, 0xffCDC59C, 0xffFFD552, 0xffFFDE20, 0xffE6C5BD, 0xffC5AC39, 0xffC5AC4A, 0xffC5AC94, 0xffB44A18, 0xffF6E6CD, 0xffFFDE52, 0xffFFDE29, 0xffFFE6CD, 0xff945A00, 0xffA46A00, 0xffCDB483, 0xff8B4A00, 0xffFFDE41, 0xffEED539, 0xffDED562, 0xffA4735A, 0xffBD9C20, 0xff9C4A08, 0xff943768, 0xff9C4A10, 0xff9C4110, 0xffEECD73, 0xffFFEEEE, 0xffFFDE08, 0xffFFD520, 0xffF6BD18, 0xffD5B439, 0xffF6FFBD, 0xff8B4A41, 0xff9C8B20, 0xff7B3768, 0xff833768, 0xff833100, 0xff944110, 0xffD5C57B, 0xffFFC552, 0xffFFDE5A, 0xff6A3100, 0xffEEDE52, 0xffE6BD08, 0xffF6FFDE, 0xffCDAC41, 0xffBDA452, 0xffDEBD83, 0xffA45210, 0xffB45A10, 0xffEEDE83, 0xffEEC562, 0xffE6D583, 0xff7B3100, 0xffEED54A, 0xffF6D56A, 0xffA44A08, 0xff944100, 0xff9C4100, 0xffA44100, 0xffA45A10, 0xffF6F6B4, 0xffF6DE73, 0xffFFF69C, 0xffE6DEA4, 0xffF6BD10, 0xffE6CD31, 0xffEEEEBD, 0xffEEAC41, 0xff394110, 0xffAC5A08, 0xffEEE69C, 0xffEEFFCD, 0xffFFE652, 0xffDEC541, 0xffD5CD6A, 0xffE6EEC5, 0xffEEE6B4, 0xffCDBD83, 0xffD5BD7B, 0xffCDB46A, 0xffD5BD73, 0xffC5B473, 0xff7B7310, 0xffA45208, 0xffD56A29, 0xffDE7B29, 0xffEEEEA4, 0xffF6E6BD, 0xffE6CD73, 0xffDEE6BD, 0xffDEBD41, 0xffE6D56A, 0xffFFDE83, 0xffF6D573, 0xffF6D562, 0xffFFCD5A, 0xffB4AC31, 0xff8B8310, 0xffB4A439, 0xffAC9C39, 0xffA4944A, 0xff200018, 0xff276810, 0xffAC4A08, 0xffB44A10, 0xffBD5218, 0xffC55218, 0xffDE8331, 0xffF6F6F6, 0xffDED583, 0xffCDBD41, 0xffFFD531, 0xffD5B431, 0xffD5BD83, 0xffF6DE7B, 0xffFFDE73, 0xffFFDE7B, 0xffFFD56A, 0xffF6CD5A, 0xffF6C54A, 0xffFFD55A, 0xffFFDE6A, 0xffF6D55A, 0xffFFC539, 0xffEEC539, 0xffE6C54A, 0xffF6C55A, 0xff7B7B18, 0xff8B8B20, 0xff7B7B10, 0xff9C9429, 0xffAC9C31, 0xffB45208, 0xffC56A18, 0xffCD7320, 0xffE6EEAC, 0xffD5CD9C, 0xffEEE66A, 0xffEECD39, 0xffEEDE31, 0xffDECD62, 0xffDEE6C5, 0xffFFDE62, 0xffFFD562, 0xffF6C552, 0xffEECD4A, 0xffEEBD39, 0xffFFCD52, 0xffFFE66A, 0xffFFD541, 0xffE6CD41, 0xffDECD4A, 0xffDECD52, 0xffE6B44A, 0xffB4A452, 0xffB49C52, 0xffC5AC73, 0xffBDAC73, 0xffC5B47B, 0xffB4A473, 0xffB4AC7B, 0xffA44A00, 0xffAC9C7B, 0xffFFDE4A, 0xffF6CD29, 0xffDEBD20, 0xffD5C539, 0xffE6DE6A, 0xffE6C55A, 0xffDEBD4A, 0xffF6BD41, 0xffFFBD4A, 0xffE6BD31, 0xffF6D552, 0xffFFD54A, 0xffF6CD41, 0xffF6D539, 0xffFFF673, 0xffFFE65A, 0xffF6B44A, 0xffEEC552, 0xffE6B441, 0xffD5B483, 0xffBDA46A, 0xffE6E6A4, 0xffE6E6AC, 0xffDECD6A, 0xffEED57B, 0xffEECD5A, 0xffE6BD41, 0xffFFC541, 0xffEECD41, 0xffEEBD4A, 0xffF6BD4A, 0xffEEAC39, 0xffE6A431, 0xffE6B439, 0xffFFBD52, 0xffB4AC5A, 0xffD5CD8B, 0xffEEEEE6, 0xffEEEEF6, 0xffEEE6DE, 0xffDED594, 0xffE6D5AC, 0xffE6BD4A, 0xffFFBD41, 0xffFFBD20, 0xffF6B410, 0xffFFAC10, 0xffFFAC18, 0xffF6B429, 0xffF6AC41, 0xffB4A45A, 0xffAC4A00, 0xffDEDEA4, 0xffCDB4B4, 0xffD5CD83, 0xffDECD7B, 0xffD5C573, 0xffEED562, 0xffDEBD52, 0xffFFCD41, 0xffF6BD29, 0xffFFB410, 0xffE69C00, 0xffEED552, 0xffE6A439, 0xffE6AC29, 0xffE69C29, 0xffF6BD39, 0xffC5AC62, 0xffEEF6AC, 0xffE6DEAC, 0xffEEF6F6, 0xffCDC56A, 0xffE6E694, 0xffEEC55A, 0xffEEBD5A, 0xffFFC529, 0xffF6B418, 0xffFFBD18, 0xffF6AC10, 0xffF6AC00, 0xffE6A429, 0xffEEAC31, 0xffEEB431, 0xffD5CD94, 0xffD5CD73, 0xffCDAC8B, 0xffEEAC29, 0xffF6B431, 0xffF6BD31, 0xffFFB429, 0xffFFBD29, 0xffFFB418, 0xffEE9C00, 0xffFFB408, 0xffEEAC08, 0xffCD9400, 0xffF6F662, 0xffEEB420, 0xffFFBD39, 0xffFFB431, 0xffEEFFD5, 0xffEEF6CD, 0xffD5C56A, 0xffE6C562, 0xffF6B420, 0xffF6AC18, 0xffFFB420, 0xffEE9C08, 0xffF6AC20, 0xffEEA418, 0xff838320, 0xffE6E6CD, 0xffD5BD62, 0xff6A7318, 0xff626200, 0xffCDAC4A, 0xffF6B439, 0xffEEAC4A, 0xffFFFFA4, 0xffEEBD31, 0xffD59410, 0xffDE9410, 0xffDEA420, 0xffD58B10, 0xffF6E67B, 0xffEEAC20, 0xffCDAC5A, 0xff414100, 0xff626A18, 0xff6A6A20, 0xffCDAC52, 0xff5A6220, 0xff737308, 0xffE6BD52, 0xffE6C541, 0xffEEEE94, 0xffE6B429, 0xffF6AC31, 0xffE69C20, 0xffEE9C18, 0xffFFAC31, 0xffD58B20, 0xffF6AC39, 0xffE6AC20, 0xffBD7B10, 0xffDEAC10, 0xff6A7329, 0xff6A7320, 0xff626208, 0xffDEA429, 0xffD57B10, 0xffC57308, 0xffB4A44A, 0xffDEDEAC, 0xffE6E6B4, 0xffC5BD94, 0xff838341, 0xffE6AC39, 0xffACA44A, 0xff9C9C4A, 0xffA4AC5A, 0xff9C9C52, 0xff8B834A, 0xffB49C41, 0xffDEC55A, 0xffFFC520, 0xffFFBD31, 0xffE6D573, 0xffEEA431, 0xffEEA429, 0xffE6A420, 0xffEEDE7B, 0xff838318, 0xff8B8B10, 0xff949420, 0xffA4A431, 0xff949C18, 0xff838B10, 0xff839410, 0xff9CA429, 0xff8B9C29, 0xff7B8B29, 0xff4A5A18, 0xff7B7B39, 0xffB4A431, 0xff7B7308, 0xffB4A462, 0xffAC9441, 0xffB4A420, 0xffE6DE52, 0xffD5CD41, 0xff6A6A18, 0xffF6A431, 0xffEE9C29, 0xffEE9C20, 0xffE69C18, 0xffCD8B00, 0xffEEEE83, 0xff949441, 0xff525200, 0xff8B8B31, 0xff5A5A00, 0xff7B7B31, 0xff949C29, 0xff8B9C10, 0xffB4BD31, 0xff94A418, 0xff839408, 0xff949C10, 0xff8B9429, 0xff838B29, 0xffA4AC39, 0xff8B8B18, 0xff9C9C20, 0xffA4A441, 0xff414A00, 0xff525A10, 0xff8B8B29, 0xff737300, 0xff6A6A00, 0xff9C9C29, 0xff949429, 0xff8B7B08, 0xff948300, 0xff7B7300, 0xffBDAC31, 0xffC5BD39, 0xffD5D552, 0xffCDC54A, 0xffCDBD4A, 0xffE6D562, 0xffF6D54A, 0xffD5C552, 0xffEEB429, 0xffF6AC29, 0xffDE9C10, 0xffD59408, 0xffDE8B18, 0xffE69418, 0xffE68B10, 0xffDE8B08, 0xffF6A418, 0xffDE9408, 0xff8B9441, 0xff525A08, 0xff8B8B41, 0xff5A6218, 0xff525A18, 0xff313908, 0xff737B20, 0xff9CAC31, 0xff8B9C18, 0xff7B8B08, 0xff94A420, 0xff9C9C18, 0xff9CA420, 0xffACAC31, 0xff949C20, 0xff7B8320, 0xffB4BD29, 0xff8B9408, 0xff737329, 0xff737331, 0xff9C8B5A, 0xff626229, 0xff203100, 0xff4A5A10, 0xff293108, 0xff9C9C31, 0xff949431, 0xff838B20, 0xff8B9420, 0xff948B31, 0xff9CA441, 0xffB4BD41, 0xffBDC539, 0xffB4B439, 0xff9C9C39, 0xffA49C31, 0xffC5BD5A, 0xff7B7B08, 0xff837B00, 0xff948308, 0xffF6A420, 0xffE69410, 0xffEE9C10, 0xffFFFF9C, 0xff626A20, 0xff4A5208, 0xff414A08, 0xff293100, 0xff5A5A18, 0xff5A6208, 0xff738308, 0xff7B8310, 0xffA4AC31, 0xffBDBD4A, 0xffACAC39, 0xff9CA418, 0xff8B9410, 0xff737B08, 0xff9CA410, 0xffA4AC08, 0xff9C9C08, 0xff949C08, 0xffBDBD73, 0xff7B8329, 0xff737B29, 0xffBDB452, 0xffA49C52, 0xff5A6210, 0xff7B8318, 0xff839418, 0xffB4C541, 0xff737B10, 0xff8B9418, 0xff626A00, 0xff5A6200, 0xff6A6A08, 0xff948B10, 0xffA4A44A, 0xffEEF6C5, 0xffD5DEAC, 0xffCD8308, 0xffE69C10, 0xffFFA420, 0xffF69C18, 0xffEE9410, 0xffDE8300, 0xffE6D57B, 0xffE69429, 0xff737B41, 0xff414A20, 0xff6A7339, 0xffBDC552, 0xffA4AC29, 0xffACBD29, 0xffB4C531, 0xff94A410, 0xff839C08, 0xff7B8B18, 0xffA4A439, 0xff8B9400, 0xff949C00, 0xffB4B418, 0xff838300, 0xff5A6229, 0xff525A29, 0xff6A7310, 0xff626A10, 0xff838B39, 0xff6A7331, 0xff7B8B39, 0xff7B8341, 0xff4A5218, 0xff9CA431, 0xff94A452, 0xff4A5A08, 0xff314100, 0xff313768, 0xff6A7300, 0xff394100, 0xffACBD20, 0xffA4AC18, 0xffB49C31, 0xffFFF68B, 0xffE6A410, 0xffD58B18, 0xffFFAC29, 0xffE68B08, 0xffD57B00, 0xffDE8B10, 0xffFFAC39, 0xffEE9C31, 0xffA4B429, 0xffB4C529, 0xffB4C520, 0xff839C20, 0xff6A8310, 0xff738318, 0xff8B8B39, 0xff949410, 0xff838B00, 0xff8B8B08, 0xff838308, 0xff949C31, 0xff8B8352, 0xff4A5A29, 0xff9C9452, 0xff6A7B29, 0xff839439, 0xff738331, 0xffEE9418, 0xffF6A429, 0xffF6A439, 0xff949C4A, 0xffA4B431, 0xffBDC529, 0xffACB420, 0xffA4B439, 0xff839429, 0xff526200, 0xff6A7B10, 0xff6A7B18, 0xff7B8331, 0xff4A5210, 0xff313910, 0xff626A31, 0xff627329, 0xff627310, 0xffA4AC6A, 0xff838B18, 0xff948310, 0xffCDCDA4, 0xffEEF6B4, 0xffAC9462, 0xffC5B48B, 0xffCDB462, 0xffF6DE4A, 0xffE69408, 0xffDE8308, 0xffD5BD41, 0xff394118, 0xff838B62, 0xffBDC541, 0xffB4B431, 0xff394A00, 0xff838B31, 0xff4A5A20, 0xff738341, 0xff9C9C6A, 0xff949452, 0xffA4A47B, 0xff626A29, 0xff8B9431, 0xff626A08, 0xffCDCD9C, 0xffCDBD8B, 0xffCDBD52, 0xffD5C55A, 0xffE6CD5A, 0xffE6BD39, 0xffFFCD29, 0xffD58318, 0xffD57B08, 0xffCD6A00, 0xffDE7B10, 0xffCD6A08, 0xffDE8B20, 0xffB4BD39, 0xff838B08, 0xff737B18, 0xff7B9408, 0xff6A7B08, 0xff6A7B39, 0xff5A6A18, 0xff526210, 0xff293768, 0xff7B835A, 0xff415218, 0xff738339, 0xff627320, 0xffA49C5A, 0xffAC9C62, 0xffE6E683, 0xffC5BD62, 0xffFFD539, 0xffDEA408, 0xffDEAC18, 0xffB46208, 0xffC56208, 0xffD5BD52, 0xff8B8B52, 0xff626A39, 0xffA4AC4A, 0xff738300, 0xff7B8B10, 0xff738B10, 0xff4A5200, 0xffACAC7B, 0xff4A5A31, 0xff314118, 0xff415220, 0xff415210, 0xff627331, 0xff415208, 0xffC5C583, 0xffE6F6B4, 0xffE6DE5A, 0xffD58310, 0xffE69420, 0xff6A7308, 0xff8B9C39, 0xff8B9C20, 0xff394108, 0xff6A7B41, 0xff7B8339, 0xffB4B473, 0xffCDC594, 0xffC5BD83, 0xffC5C594, 0xffEEAC18, 0xffDE9418, 0xffEEA420, 0xffFFB439, 0xffFFAC41, 0xffFFB44A, 0xff949418, 0xff394129, 0xff394A10, 0xff737B31, 0xff6A7B31, 0xffD57B20, 0xffCD7318, 0xffD5C58B, 0xffDED59C, 0xffBDB483, 0xffC5B462, 0xffAC9C4A, 0xffDECD73, 0xffD58300, 0xffEE8B08, 0xffCD7B00, 0xffE6D55A, 0xff6A734A, 0xffBDB47B, 0xffFFA418, 0xffF69408, 0xffF69410, 0xffD58308, 0xffEEDE5A, 0xffAC6A08, 0xffACA462, 0xff949C39, 0xff526218, 0xff7B7B00, 0xffD5B429, 0xffDEC529, 0xffC5BD8B, 0xffE6EEBD, 0xffC5C59C, 0xffACA47B, 0xffACA473, 0xffCDC58B, 0xffD5CD7B, 0xffC5BD73, 0xffCDC57B, 0xffA4A462, 0xffFFF683, 0xff293908, 0xff5A7320, 0xff948B52, 0xff7B8308, 0xff9C4A18, 0xffFFEE41, 0xffFFFF41, 0xffFFFF31, 0xffF6EE31, 0xffE6D539, 0xffB46210, 0xffBDB48B, 0xffBDB46A, 0xffC5B46A, 0xffBD6210, 0xff6A7B20, 0xff738B18, 0xff525A00, 0xff4A5A00, 0xffD5C529, 0xffCDAC08, 0xffAC5200, 0xffA45200, 0xffC57318, 0xffB4AC83, 0xffDEDEBD, 0xffCDBD73, 0xffFFAC20, 0xffE6E68B, 0xff9CAC39, 0xffA4B473, 0xffCD9C00, 0xffDEA410, 0xffCD6A10, 0xffBD6208, 0xffDE8320, 0xffD57B18, 0xffCD7310, 0xffD57320, 0xff945200, 0xff8B4100, 0xffC5BD7B, 0xffEEF6A4, 0xffEEF69C, 0xff94946A, 0xff6A7B00, 0xffD59C10, 0xffD59C08, 0xffC58310, 0xffCD7B18, 0xffA45A00, 0xffCD8318, 0xffB45A08, 0xffC59C8B, 0xffBDAC62, 0xffD5C594, 0xffD5BD5A, 0xffC56210, 0xff9C9431, 0xffCD7B10, 0xffEE8B31, 0xffB4B483, 0xffDEC56A, 0xffDE9420, 0xffBD7300, 0xffEEEE9C, 0xffD5D594, 0xff394A08, 0xff949C41, 0xffBDB473, 0xffEEF6BD, 0xff627308, 0xffDEDE7B, 0xffFFEE62, 0xffB46A00, 0xffFFB441, 0xffCD8B08, 0xffCDB44A, 0xffDED57B, 0xffE6EE9C, 0xffD5D57B, 0xff944A00, 0xff5A6239, 0xffDE8B29, 0xffACA45A, 0xffAC9C5A, 0xffCDC583, 0xffA49C62, 0xff838310, 0xffF69C29, 0xffF69418, 0xffEEE673, 0xffD5C562, 0xffC56A10, 0xffBD7310, 0xffBDAC5A, 0xff738310, 0xffAC6200, 0xffFFA431, 0xffFF9C29, 0xffF6E65A, 0xffE6E67B, 0xffCDBD62, 0xff102008, 0xffEE9431, 0xffAC6208, 0xffCD7308, 0xffB4AC62, 0xffDECD83, 0xffB4AC6A, 0xffD5D58B, 0xffACAC52, 0xff949439, 0xff9C9420, 0xffE6DE83, 0xffCD8310, 0xffE6D552, 0xff526208, 0xffE68B29, 0xffBDB45A, 0xff7B8300, 0xffA4A429, 0xffA49C39, 0xff7B8B00, 0xff737B00, 0xff5A6A00, 0xffE6DE8B, 0xff415200, 0xff314A00, 0xff395A08, 0xff395200, 0xff416208, 0xff4A6200, 0xff5A6231, 0xffAC5A00, 0xffACA452, 0xffA49C41, 0xffF6A410, 0xffF69C08, 0xff314108, 0xffBD6A08, 0xff947B00, 0xffAC9418, 0xffA48B18, 0xffCDCD94, 0xff8B9439, 0xffE6EEB4, 0xffDEEEAC, 0xffDED573, 0xff314110, 0xff5A6A08, 0xff837B10, 0xffBD7B00, 0xff837300, 0xff9C9C5A, 0xff838B41, 0xff5A6A10, 0xff839420, 0xff415A00, 0xff5A7310, 0xff415A10, 0xff102000, 0xff526229, 0xff314A10, 0xffB46A08, 0xffC56A00, 0xffF69C31, 0xffC57B08, 0xffB4B47B, 0xffC5BD9C, 0xff627300, 0xffA49C73, 0xff293910, 0xffDE8318, 0xff182768, 0xff182908, 0xff203110, 0xff6A8308, 0xff738329, 0xff081800, 0xff94945A, 0xff838B52, 0xffA4A473, 0xffEEF694, 0xff7B6A00, 0xff8B8308, 0xffA4A46A, 0xffA49420, 0xff9C8308, 0xffDE7B20, 0xff8B3908, 0xffA49C18, 0xffB4BD73, 0xffE6F6C5, 0xffFFFF94, 0xffCDC562, 0xffA48B10, 0xffBDAC29, 0xffACA439, 0xffB45A00, 0xffE68B20, 0xff7B9410, 0xffACAC6A, 0xff737B39, 0xff738320, 0xffE6DE7B, 0xffC5C573, 0xffDEDE94, 0xffE6EE94, 0xff8B9452, 0xff8B9C31, 0xff4A5229, 0xff838B4A, 0xffC5BD6A, 0xffBDB462, 0xffE6EEA4, 0xffAC9C29, 0xff8B945A, 0xffACAC41, 0xffBDAC83, 0xffBDA473, 0xffB4A441, 0xffCD6A18, 0xff733931, 0xff313929, 0xff6A8320, 0xff8B7B00, 0xff7B8B20, 0xff4A6208, 0xff7B834A, 0xff4A6210, 0xff8B9C41, 0xff293918, 0xff314120, 0xffDEDE83, 0xffB4BD8B, 0xffB4AC4A, 0xff627B31, 0xff7B9441, 0xffBD7308, 0xff627318, 0xffA4AC52, 0xff314131, 0xffCDB45A, 0xffB4B462, 0xff182910, 0xffE6EE8B, 0xffBDA44A, 0xff082000, 0xff293920, 0xff203108, 0xffDED56A, 0xffA49400, 0xffBDAC4A, 0xffCDBD6A, 0xff9C9C62, 0xffDEE6AC, 0xffB4AC52, 0xffCDCD8B, 0xffBDBD83, 0xff5A6A31, 0xffBDBD7B, 0xffBDAC52, 0xff949C6A, 0xffCDC573, 0xffA4A452, 0xff737B4A, 0xffACA441, 0xffCDCD83, 0xff626A4A, 0xff201829, 0xffB4B452, 0xff83834A, 0xffACA431, 0xff7B7B52, 0xffBDBD5A }; 



int dots[] = { 0xff000000, 0xffEFEFEF, 0xff20EF12, 0xffEF2012, 0xff1975EF};

//int[] modz = { 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181 };
byte[] modz = { 13, 34, 5, 127, 52};
FixLib fix = new FixLib();

int a = 3;  //1;
int b = 3;  //1;
int m = 12;
int n1 = 15;  //5;
int n2 = 18;  //6;
int n3 = alf; //48;
float r, f;

////////////////////////////////////////////////////
//
public void setup() {
  // setup core sketch settings items
  size(1024, 768);
  frameRate(303);  //  P2D, P3D, OPENGL, PDF
  background(11);

  //  setup variables
  cX = width/2;
  cY = height/2;

  ellipseMode(CENTER);
  rectMode(CENTER);
  smooth();
  noFill();



}


////////////////////////////////////////////////////
//
public void draw()
{
    angle = frameCount;

    r = noise(frameCount) + pow((pow(abs(cos(m*f/4)/a), random(n2)   ) + pow(abs(sin(m*f/4)/b), random(n3)  )), -(1/n1));
    if( radius >= height )
      radius = r;
    else
      radius += r;      

    if( frameCount%alf==0) 
      radius += r;
    else 
      radius -= r;


    x = cX - PApplet.parseInt( cos(radians(angle)) * radius );
    y = cY - PApplet.parseInt( sin(radians(angle)) * radius );

//ARROW, CROSS, HAND, MOVE, TEXT, WAIT

 

//    stroke(#EF0000);

// println((int)frameRate + " ~ " + frameCount + " % " + modz[(int)random(modz.length)]);

    if( (int)frameRate % modz[(int)random(modz.length)] == 0 ) {
pushStyle();
//	fill()

//	stroke()
//stroke(frameCount%2==0?0:255, alf);
// stroke( random(alf/PI), random(alf*PI), random(255), alf/TWO_PI);
fix.ranPalStroke(p3);
// fill( random(255), random(alf), random(alf),alf);
noFill();

//	tint()
tint(modz[(int)random(modz.length)]);
//	strokeWeight()
strokeWeight( r*noise(angle) );
//	strokeCap()

//	strokeJoin()

//	shininess()
shininess(alf); 

//	ambient()
// ambient(11);

//	DRAW -----------------------
ellipse( x, y, angle*r, angle*r );

strokeWeight(r*1.1f);
stroke(random(255));
point( width-y, height-x );
point( y, x);

// fill(random(255),random(255),alf, alf);
// stroke(#2012EF, random(alf/TWO_PI));
fix.ranPalStroke(p3);
sphereDetail( (int)random(alf));
sphere(radius/r);

//	drop the style
popStyle();

    } else { 
    	strokeWeight(PI+noise(angle) );
		  // stroke( random(255) );
      // fix.randStroke();
      // stroke(frameCount%3==0?0:255);
      fix.ranPalStroke(p3);
    	point( x, y );
    	// ellipse( x, y, alf/r, alf/r);

    }



 
 
if( frameCount % 30 == 0 ) {
    strokeWeight(TWO_PI);
    // fix.ranPalStroke(p3);
    stroke(random(255),alf);
    point(radius, radius);

    // stroke(random(255),alf);
    // strokeWeight(.75); 
    // line( x, y, radius, radius );
    // stroke( random(255), alf/QUARTER_PI);
    // line( 0, random(height), width, random(height) );

    radius += HALF_PI;


beginCamera();
camera();
	rotateX(-frameCount);
	rotateY(frameCount);
endCamera();

strokeWeight(random(PI));
// fix.ranPalFill(p3);
// fix.ranPalStroke(p3);

// stroke(random(alf), random(255), random(alf), alf*PI);
box(angle);


}
 

f+=.0037f;

 
    if( frameCount > (width+height)*6 ) {

      exit();
    }





}




///////////////////////////////////////////////////////////
//  End handler, saves png
public void exit() 
{


	// artDaily("ERICFICKES.COM" );
	artDaily( "ERICFICKES.COM" );

  //  if final, save output to png
  if ( isFinal )
  {
    save( fix.pdeName() + "-" + fix.getTimestamp()+".png" );
  }


  noLoop();
  System.gc();
  super.stop();
}

///////////////////////////////////////////////////////////
//
//  Spit out ART DAILY message
public void artDaily( String dailyMsg ) {

textFont( createFont( "Silom", 21 ) );
smooth();

  fill(255);
  text( " "+dailyMsg, 0, height-21 );
  fill(0xff1975EF);
  text( " "+dailyMsg, 0, height-22 );
}

/*
FixLib is your new utility library.  House all your helper code here,
and keep the main sketch.pde as light as possible ( setup, draw, exit, artDaily )
*/
class FixLib {


  FixLib(){}



  //////////////////////////////////////////////////////
  //  
  public void drawLissajous( float a, float b, float amp )
  {
    //  float amp = 33;
    float x, y;
    float sz = amp / PI;  //TWO_PI;
  
    for ( float t = 0; t <= 360; t += 1)
    {
      x = a - amp * sin(a * t * PI/180);
      y = b - amp * sin(b * t * PI/180);
      noFill();
      ellipse(x, y, sz, sz);
    }
  }



  //////////////////////////////////////////////////////
  //  Pass in a color, and this will fill even frames with 255,
  //  odd frames with clr
  public void evenOddFill( int clr ) {
    if ( frameCount % 2 == 0 ) {
      fill(255);
    } 
    else {
      fill( clr );
    }
  }
  //////////////////////////////////////////////////////
  //  Pass in a color, and this will fill even frames with 255,
  //  odd frames with clr
  //  * INVERTED for evenOddFill() pleasure
  public void evenOddStroke( int clr ) {
    if ( frameCount % 2 == 0 ) {
      stroke(clr);
    } 
    else {
      stroke(0);
    }
  }
  
  
  
  /////////////////////////////////////////////////////////////////
  //  spit out an 8bit heart
  public void bitHeart( float x, float y, boolean grid ) {
  
    int blockSize = 25;
    float htSize = 250;
    strokeWeight(.5f);
  
    //  GRID
    if (grid) {
      stroke(0xffEFEFEF);//, 50);
  
      for ( int xx = 0 ; xx <= 13; xx++ ) {
  
        line( x+(blockSize*xx), 0, x+(blockSize*xx), height );
        line( 0, y+(blockSize*xx), width, y+(blockSize*xx) );
      }
    }
    //  GRID
  
  
  
    //  HEART
    stroke(0xff333333);
  
    //  white blocks
    fill(255);
    rect( x+(blockSize*2), y+blockSize, blockSize, blockSize );
    rect( x+(blockSize), y+(blockSize*2), blockSize, blockSize );
  
    fill(0);
    // TODO: make this smarter
    rect( x+(blockSize*2), y, blockSize, blockSize );
    rect( x+(blockSize*3), y, blockSize, blockSize );
    rect( x+(blockSize*4), y, blockSize, blockSize );
  
    rect( x+(blockSize*8), y, blockSize, blockSize );
    rect( x+(blockSize*9), y, blockSize, blockSize );
    rect( x+(blockSize*10), y, blockSize, blockSize );
  
    rect( x+(blockSize), y+blockSize, blockSize, blockSize );
  
    fill(0xffEF0000);
    rect( x+(blockSize*3), y+blockSize, blockSize, blockSize );
    rect( x+(blockSize*4), y+blockSize, blockSize, blockSize );
    rect( x+(blockSize*2), y+(blockSize*2), blockSize, blockSize );
    rect( x+(blockSize*3), y+(blockSize*2), blockSize, blockSize );
    rect( x+(blockSize*4), y+(blockSize*2), blockSize, blockSize );
    rect( x+(blockSize*5), y+(blockSize*2), blockSize, blockSize );
    rect( x+(blockSize*7), y+(blockSize*2), blockSize, blockSize );
    rect( x+(blockSize*8), y+(blockSize*2), blockSize, blockSize );
    rect( x+(blockSize*9), y+(blockSize*2), blockSize, blockSize );
    rect( x+(blockSize*10), y+(blockSize*2), blockSize, blockSize );
    rect( x+(blockSize*11), y+(blockSize*2), blockSize, blockSize );
  
    rect( x+(blockSize), y+(blockSize*3), blockSize, blockSize );
    rect( x+(blockSize*2), y+(blockSize*3), blockSize, blockSize );
    rect( x+(blockSize*3), y+(blockSize*3), blockSize, blockSize );
    rect( x+(blockSize*4), y+(blockSize*3), blockSize, blockSize );
    rect( x+(blockSize*5), y+(blockSize*3), blockSize, blockSize );
    rect( x+(blockSize*6), y+(blockSize*3), blockSize, blockSize );
    rect( x+(blockSize*7), y+(blockSize*3), blockSize, blockSize );
    rect( x+(blockSize*8), y+(blockSize*3), blockSize, blockSize );
    rect( x+(blockSize*9), y+(blockSize*3), blockSize, blockSize );
    rect( x+(blockSize*10), y+(blockSize*3), blockSize, blockSize );
    rect( x+(blockSize*11), y+(blockSize*3), blockSize, blockSize );
  
    rect( x+(blockSize), y+(blockSize*4), blockSize, blockSize );
    rect( x+(blockSize*2), y+(blockSize*4), blockSize, blockSize );
    rect( x+(blockSize*3), y+(blockSize*4), blockSize, blockSize );
    rect( x+(blockSize*4), y+(blockSize*4), blockSize, blockSize );
    rect( x+(blockSize*5), y+(blockSize*4), blockSize, blockSize );
    rect( x+(blockSize*6), y+(blockSize*4), blockSize, blockSize );
    rect( x+(blockSize*7), y+(blockSize*4), blockSize, blockSize );
    rect( x+(blockSize*8), y+(blockSize*4), blockSize, blockSize );
    rect( x+(blockSize*9), y+(blockSize*4), blockSize, blockSize );
    rect( x+(blockSize*10), y+(blockSize*4), blockSize, blockSize );
    rect( x+(blockSize*11), y+(blockSize*4), blockSize, blockSize );
  
    rect( x+(blockSize*2), y+(blockSize*5), blockSize, blockSize );
    rect( x+(blockSize*3), y+(blockSize*5), blockSize, blockSize );
    rect( x+(blockSize*4), y+(blockSize*5), blockSize, blockSize );
    rect( x+(blockSize*5), y+(blockSize*5), blockSize, blockSize );
    rect( x+(blockSize*6), y+(blockSize*5), blockSize, blockSize );
    rect( x+(blockSize*7), y+(blockSize*5), blockSize, blockSize );
    rect( x+(blockSize*8), y+(blockSize*5), blockSize, blockSize );
    rect( x+(blockSize*9), y+(blockSize*5), blockSize, blockSize );
    rect( x+(blockSize*10), y+(blockSize*5), blockSize, blockSize );
  
    rect( x+(blockSize*2), y+(blockSize*6), blockSize, blockSize );
    rect( x+(blockSize*3), y+(blockSize*6), blockSize, blockSize );
    rect( x+(blockSize*4), y+(blockSize*6), blockSize, blockSize );
    rect( x+(blockSize*5), y+(blockSize*6), blockSize, blockSize );
    rect( x+(blockSize*6), y+(blockSize*6), blockSize, blockSize );
    rect( x+(blockSize*7), y+(blockSize*6), blockSize, blockSize );
    rect( x+(blockSize*8), y+(blockSize*6), blockSize, blockSize );
    rect( x+(blockSize*9), y+(blockSize*6), blockSize, blockSize );
    rect( x+(blockSize*10), y+(blockSize*6), blockSize, blockSize );
  
    rect( x+(blockSize*3), y+(blockSize*7), blockSize, blockSize );
    rect( x+(blockSize*4), y+(blockSize*7), blockSize, blockSize );
    rect( x+(blockSize*5), y+(blockSize*7), blockSize, blockSize );
    rect( x+(blockSize*6), y+(blockSize*7), blockSize, blockSize );
    rect( x+(blockSize*7), y+(blockSize*7), blockSize, blockSize );
    rect( x+(blockSize*8), y+(blockSize*7), blockSize, blockSize );
    rect( x+(blockSize*9), y+(blockSize*7), blockSize, blockSize );
  
    rect( x+(blockSize*4), y+(blockSize*8), blockSize, blockSize );
    rect( x+(blockSize*5), y+(blockSize*8), blockSize, blockSize );
    rect( x+(blockSize*6), y+(blockSize*8), blockSize, blockSize );
    rect( x+(blockSize*7), y+(blockSize*8), blockSize, blockSize );
    rect( x+(blockSize*8), y+(blockSize*8), blockSize, blockSize );
  
    rect( x+(blockSize*5), y+(blockSize*9), blockSize, blockSize );
    rect( x+(blockSize*6), y+(blockSize*9), blockSize, blockSize );
    rect( x+(blockSize*7), y+(blockSize*9), blockSize, blockSize );
  
    rect( x+(blockSize*6), y+(blockSize*10), blockSize, blockSize );
  
    fill(0);
  
  
  
  
    rect( x+(blockSize*5), y+blockSize, blockSize, blockSize );
    rect( x+(blockSize*6), y+(blockSize*2), blockSize, blockSize );
    rect( x+(blockSize*7), y+(blockSize), blockSize, blockSize );
  
  
    fill(0xffEF0000);  
    rect( x+(blockSize*4), y+blockSize, blockSize, blockSize );
    rect( x+(blockSize*8), y+blockSize, blockSize, blockSize );
    rect( x+(blockSize*9), y+blockSize, blockSize, blockSize );
    rect( x+(blockSize*10), y+blockSize, blockSize, blockSize );
    rect( x+blockSize, y+(blockSize*5), blockSize, blockSize );
    rect( x+(blockSize*2), y+(blockSize*7), blockSize, blockSize );
    rect( x+(blockSize*3), y+(blockSize*8), blockSize, blockSize );
    rect( x+(blockSize*4), y+(blockSize*9), blockSize, blockSize );
    rect( x+(blockSize*5), y+(blockSize*10), blockSize, blockSize );  
    rect( x+(blockSize*6), y+(blockSize*11), blockSize, blockSize );
    rect( x+(blockSize*7), y+(blockSize*10), blockSize, blockSize );
    rect( x+(blockSize*8), y+(blockSize*9), blockSize, blockSize );
    rect( x+(blockSize*9), y+(blockSize*8), blockSize, blockSize );
    rect( x+(blockSize*10), y+(blockSize*7), blockSize, blockSize );
    rect( x+(blockSize*11), y+(blockSize*5), blockSize, blockSize );
  
    fill(0);
    rect( x+(blockSize*11), y+blockSize, blockSize, blockSize );
    rect( x, y+(blockSize*2), blockSize, blockSize );
    rect( x, y+(blockSize*3), blockSize, blockSize );
    rect( x, y+(blockSize*4), blockSize, blockSize );
    rect( x, y+(blockSize*5), blockSize, blockSize );
    rect( x+blockSize, y+(blockSize*6), blockSize, blockSize );
    rect( x+blockSize, y+(blockSize*7), blockSize, blockSize );
    rect( x+(blockSize*2), y+(blockSize*8), blockSize, blockSize );
    rect( x+(blockSize*3), y+(blockSize*9), blockSize, blockSize );
    rect( x+(blockSize*4), y+(blockSize*10), blockSize, blockSize );
    rect( x+(blockSize*5), y+(blockSize*11), blockSize, blockSize );
    rect( x+(blockSize*6), y+(blockSize*12), blockSize, blockSize );
    rect( x+(blockSize*7), y+(blockSize*11), blockSize, blockSize );
    rect( x+(blockSize*8), y+(blockSize*10), blockSize, blockSize );
    rect( x+(blockSize*9), y+(blockSize*9), blockSize, blockSize );
    rect( x+(blockSize*10), y+(blockSize*8), blockSize, blockSize );
    rect( x+(blockSize*11), y+(blockSize*7), blockSize, blockSize );
    rect( x+(blockSize*11), y+(blockSize*6), blockSize, blockSize );
  
    rect( x+(blockSize*12), y+(blockSize*5), blockSize, blockSize );
    rect( x+(blockSize*12), y+(blockSize*4), blockSize, blockSize );
    rect( x+(blockSize*12), y+(blockSize*3), blockSize, blockSize );
    rect( x+(blockSize*12), y+(blockSize*2), blockSize, blockSize );
  }
  
  


  
  ///////////////////////////////////////////////////////////
  //  draw a star
  public void star(int n, float cx, float cy, float w, float h, float startAngle, float proportion)
  {
    if (n > 2)
    {
      float angle = TWO_PI/ (2 *n);  // twice as many sides
      float dw; // draw width
      float dh; // draw height
  
      w = w / 2.0f;
      h = h / 2.0f;
  
      beginShape();
      for (int i = 0; i < 2 * n; i++)
      {
        dw = w;
        dh = h;
        if (i % 2 == 1) // for odd vertices, use short radius
        {
          dw = w * proportion;
          dh = h * proportion;
        }
        vertex(cx + dw * cos(startAngle + angle * i), 
        cy + dh * sin(startAngle + angle * i));
      }
      endShape(CLOSE);
    }
  }
  
  
  
  
  
  //////////////////////////
  int f0 = 0;
  int f1 = 1;
  //int f2 = 1;
  
  public int nextFib( int f2)
  {
    int result = f2;
    f0 = f1;
    f1 = f2;
    f2 = f0 + f1;
    return result;
  }
  
  //////////////////////////
  //  Calculate max loop count
  public float getMax( float shapeSize ) {
    return ( ( width * height ) / shapeSize );
  }
  
  
  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  //  pull colors out of image and return color[]
  //  http://forum.processing.org/topic/extract-colors-from-images
  public ArrayList getImgColors( PImage img ) 
  {
    ArrayList alColors = new ArrayList();
  
    img.loadPixels();
  
    int color1, color2;
    // TODO: what's a good way to pull DISTINCT colors with a color[]?
    for ( int c = 0; c < img.pixels.length; c++ ) 
    {
      if ( alColors.size() == 0 ) { 
        alColors.add( (int)img.pixels[ c ] );
      } 
      else 
      {
  
        if ( ! alColors.contains( (int)img.pixels[ c ] ) ) 
        {
          color1 = (Integer) alColors.get( alColors.size()-1 );
          color2 = img.pixels[c];
          // double distinct filtering
          if ( color1 > color2 )
          {
  
            alColors.add( (int)img.pixels[ c ] );
          }
        }
      }
    }
  
    return alColors;
  }
  
  
  
  ///////////////////////////////////////////////////////
  //  Make grid of shapes filled with each color in supplied
  //  color[]
  public void paletteGrid( ArrayList pall ) {
  
    float xx = 0;
    float yy = 0;  
    float sz = 30;
  
    // debug
    //text( pall.size() + " colors ", sz, sz );
    int tmp;
    for ( int cc = 0; cc < pall.size(); cc++ ) {
  
      noStroke();
      tmp = (Integer)pall.get(cc);
      fill( tmp, alf*4 );
      rect( xx, yy, sz, sz );
  
      if ( xx < width ) {
        xx += (sz *1.25f);
      } 
      else {
        xx = 0;
        yy += (sz *1.25f);
      }
    }
  
  
  
  
    textFont( createFont( "HiraMaruProN-W4", 222 ) );
    fill(random(alf));
    text( pall.size(), random( alf, width/3 ), random(height) );
  }
  
  
  
  
  
  
  
  //////////////////////////////////////////////////////////////////////////
  //  Draw manual circle
  //  ellipse(x, y, width, height)
  public void circle( float startX, float startY, float w, float h ) {
  
    float angle = 0;
    float x, y;
  
    while ( angle < 360 ) {
  
      // make circle draw faster by skipping angles
      if ( angle % 10 == 0 ) {
  
        x = startX - PApplet.parseInt( cos(radians(angle)) * w );
        y = startY - PApplet.parseInt( sin(radians(angle)) * w );
  
        smooth();
        ellipse( x, y, w, h );
      }
      angle++;
    }
  }
  
  ///////////////////////////////////////////////////////////////////////////
  //  draw a circle of circles
  public void circle( float startX, float startY, float w, float h, float modAngle ) {
  
    float angle = 0;
    float x, y;
  
    while ( angle < 360 ) {
  
      // make circle draw faster by skipping angles
      if ( angle % modAngle == 0 ) {
  
        x = startX - PApplet.parseInt( cos(radians(angle)) * w );
        y = startY - PApplet.parseInt( sin(radians(angle)) * w );
  
        smooth();
        ellipse( x, y, w, h );
      }
      angle++;
    }
  }
  
  //////////////////////////////////////////////////////////////////////////
  //  HEXAGON inspired by http://www.rdwarf.com/lerickson/hex/index.html
  public void hexagon( float startX, float startY, float shapeSize ) {
  
    line( startX, startY+(shapeSize*.5f), startX+(shapeSize*.25f), startY );
    line( startX+(shapeSize*.25f), startY, startX+(shapeSize*.75f), startY );
    line( startX+(shapeSize*.75f), startY, startX+(shapeSize), startY+(shapeSize*.5f) );
  
    line( startX+(shapeSize), startY+(shapeSize*.5f), startX+(shapeSize*.75f), startY+shapeSize );
    line( startX+(shapeSize*.75f), startY+shapeSize, startX+(shapeSize*.25f), startY+shapeSize );
    line( startX+(shapeSize*.25f), startY+shapeSize, startX, startY+(shapeSize*.5f) );
  }
  
  ////////////////////////////////////////////////////
  //  Return a random color from supplied palette
  public int getRanColor(ArrayList palette)
  {
    return (Integer)palette.get( (int)random( palette.size()-1 ) );
  }
  
  
  ////////////////////////////////////////////////////
  //  Randomly stroke using image from color list
  public void ranPalStroke(int[] palette)
  {
    // pallete
    stroke( palette[ PApplet.parseInt(random( palette.length-1 )) ], alf );
  }
  public void ranPalStroke(ArrayList palette)
  {
    // pallete
    stroke( (Integer)palette.get( (int)random( palette.size()-1 ) ), alf );
  }
  public void ranPalStroke100(int[] palette)
  {
    // pallete
    stroke( palette[ PApplet.parseInt(random( palette.length-1 )) ], 100 );
  }
  public void ranPalStroke100(ArrayList palette)
  {
    // pallete
    stroke( (Integer)palette.get( (int)random( palette.size()-1 ) ), 100 );
  }
  public void ranPalFill(int[] palette)
  {
    fill( palette[ PApplet.parseInt(random( palette.length-1 )) ], alf );
  }
  public void ranPalFill(ArrayList palette)
  {
    // pallete
    fill( (Integer)palette.get( (int)random( palette.size()-1 ) ), alf );
  }
  public void ranPalFill100(int[] palette)
  {
    // pallete
    fill( palette[ PApplet.parseInt(random( palette.length-1 )) ], 100 );
  }
  public void ranPalFill100(ArrayList palette)
  {
    // pallete
    fill( (Integer)palette.get( (int)random( palette.size()-1 ) ), 100 );
  }
  
  ///////////////////////////////////////////////////////////
  //  Helper to random(255) stroke
  public void randFill() {  
    fill( random(255), random(255), random(255), alf );
  }
  public void randStroke() {  
    stroke( random(255), random(255), random(255), alf );
  }
  public void randStroke100() {  
    stroke( random(255), random(255), random(255), 100 );
  }
  
  ///////////////////////////////////////////////////////////
  //  get EPOCH timestamp
////  public long getTimestamp() {
////    return new Date().getTime()/1000;
//  }
  
  public String getTimestamp() {
    return ""+month()+day()+year()+hour()+minute()+millis();
  }
  
  
  /////////////
  //  TODO: Is there a better way to get the current sketch name?
  public String pdeName() {
    return split( this.toString(), "[")[0];
  }


}
  static public void main(String[] passedArgs) {
    String[] appletArgs = new String[] { "--full-screen", "--bgcolor=#F50C0C", "--stop-color=#cccccc", "MonCirclez" };
    if (passedArgs != null) {
      PApplet.main(concat(appletArgs, passedArgs));
    } else {
      PApplet.main(appletArgs);
    }
  }
}
